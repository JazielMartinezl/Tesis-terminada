y5 <- x5
plot(x5, y5, main = "(e) X e Y perfectamente correlacionados", xlab = "X", ylab = "Y", pch = 19, cex.main = 1.2)
add_lines()
# (f) X and Y Not Linearly Related
x6 <- rnorm(50)
y6 <- x6^2-3 + rnorm(50, sd = 0.2)
plot(x6, y6, main = "(f) X e Y no relacionados linealmente", xlab = "X", ylab = "Y", pch = 19, cex.main = 1.2)
add_lines()
#| label: fig-correlacion
#| fig-cap: "(a)-(f) son diagramas de dispersión con una variedad de estructuras de correlación."
#| fig-subcap:
#|  - "(a) X e Y correlacionados positivamente"
#|  - "(b) X e Y moderadamente correlacionados"
#|  - "(c) X e Y correlacionados negativamente"
#|  - "(d) X e Y no correlacionados"
#|  - "(e) X e Y perfectamente correlacionados"
#|  - "(f) X e Y no relacionados linealmente"
#| layout-ncol: 3
#| layout-nrow: 3
par(mfrow = c(2, 3))
# Función para agregar líneas en x = 0 e y = 0
add_lines <- function() {
abline(h = 0, col = "#383838", lwd = 2)  # Línea horizontal en y = 0
abline(v = 0, col = "#383838", lwd = 2) # Línea vertical en x = 0
}
# (a) X and Y Positively Correlated
set.seed(123)
x1 <- rnorm(50)
y1 <- x1 + rnorm(50, sd = 0.5)
plot(x1, y1, main = "(a) X e Y correlacionados positivamente", xlab = "X", ylab = "Y", pch = 19, cex.main = 1.0, xlim = c(-3, 3))
add_lines()
# (b) X and Y Moderately Correlated
x2 <- rnorm(50)
y2 <- 0.5 * x2 + rnorm(50, sd = 0.7)
plot(x2, y2, main = "(b) X e Y moderadamente correlacionados", xlab = "X", ylab = "Y", pch = 19, cex.main = 1.2)
add_lines()
# (c) X and Y Negatively Correlated
x3 <- rnorm(50)
y3 <- -x3 + rnorm(50, sd = 0.5)
plot(x3, y3, main = "(c) X e Y correlacionados negativamente", xlab = "X", ylab = "Y", pch = 19, cex.main = 1.2)
add_lines()
# (d) X and Y Not Correlated
x4 <- rnorm(50)
y4 <- rnorm(50)
plot(x4, y4, main = "(d) X e Y no correlacionados", xlab = "X", ylab = "Y", pch = 19, cex.main = 1.2)
add_lines()
# (e) X and Y Perfectly Correlated
x5 <- seq(-3, 3, length.out = 50)
y5 <- x5
plot(x5, y5, main = "(e) X e Y perfectamente correlacionados", xlab = "X", ylab = "Y", pch = 19, cex.main = 1.2)
add_lines()
# (f) X and Y Not Linearly Related
x6 <- rnorm(50)
y6 <- x6^2-3 + rnorm(50, sd = 0.2)
plot(x6, y6, main = "(f) X e Y no relacionados linealmente", xlab = "X", ylab = "Y", pch = 19, cex.main = 1.2)
add_lines()
#| label: fig-correlacion
#| fig-cap: "(a)-(f) son diagramas de dispersión con una variedad de estructuras de correlación."
#| fig-subcap:
#|  - "(a) X e Y correlacionados positivamente"
#|  - "(b) X e Y moderadamente correlacionados"
#|  - "(c) X e Y correlacionados negativamente"
#|  - "(d) X e Y no correlacionados"
#|  - "(e) X e Y perfectamente correlacionados"
#|  - "(f) X e Y no relacionados linealmente"
#| layout-ncol: 3
#| layout-nrow: 3
par(mfrow = c(2, 3))
# Función para agregar líneas en x = 0 e y = 0
add_lines <- function() {
abline(h = 0, col = "#383838", lwd = 2)  # Línea horizontal en y = 0
abline(v = 0, col = "#383838", lwd = 2) # Línea vertical en x = 0
}
# (a) X and Y Positively Correlated
set.seed(123)
x1 <- rnorm(50)
y1 <- x1 + rnorm(50, sd = 0.5)
plot(x1, y1, main = "(a) X e Y correlacionados positivamente", xlab = "X", ylab = "Y", pch = 19, cex.main = 1.0, xlim = c(-3, 3))
add_lines()
# (b) X and Y Moderately Correlated
x2 <- rnorm(50)
y2 <- 0.5 * x2 + rnorm(50, sd = 0.7)
plot(x2, y2, main = "(b) X e Y moderadamente correlacionados", xlab = "X", ylab = "Y", pch = 19, cex.main = 1.2)
add_lines()
# (c) X and Y Negatively Correlated
x3 <- rnorm(50)
y3 <- -x3 + rnorm(50, sd = 0.5)
plot(x3, y3, main = "(c) X e Y correlacionados negativamente", xlab = "X", ylab = "Y", pch = 19, cex.main = 1.2)
add_lines()
# (d) X and Y Not Correlated
x4 <- rnorm(50)
y4 <- rnorm(50)
plot(x4, y4, main = "(d) X e Y no correlacionados", xlab = "X", ylab = "Y", pch = 19, cex.main = 1.2)
add_lines()
# (e) X and Y Perfectly Correlated
x5 <- seq(-3, 3, length.out = 50)
y5 <- x5
plot(x5, y5, main = "(e) X e Y perfectamente correlacionados", xlab = "X", ylab = "Y", pch = 19, cex.main = 1.2)
add_lines()
# (f) X and Y Not Linearly Related
x6 <- rnorm(50)
y6 <- x6^2-3 + rnorm(50, sd = 0.2)
plot(x6, y6, main = "(f) X e Y no relacionados linealmente", xlab = "X", ylab = "Y", pch = 19, cex.main = 1.2)
add_lines()
#| label: fig-correlacion
#| fig-cap: "(a)-(f) son diagramas de dispersión con una variedad de estructuras de correlación."
#| fig-subcap:
#|  - "(a) X e Y correlacionados positivamente"
#|  - "(b) X e Y moderadamente correlacionados"
#|  - "(c) X e Y correlacionados negativamente"
#|  - "(d) X e Y no correlacionados"
#|  - "(e) X e Y perfectamente correlacionados"
#|  - "(f) X e Y no relacionados linealmente"
#| layout-ncol: 2
#| layout-nrow: 3
par(mfrow = c(2, 3))
# Función para agregar líneas en x = 0 e y = 0
add_lines <- function() {
abline(h = 0, col = "#383838", lwd = 2)  # Línea horizontal en y = 0
abline(v = 0, col = "#383838", lwd = 2) # Línea vertical en x = 0
}
# (a) X and Y Positively Correlated
set.seed(123)
x1 <- rnorm(50)
y1 <- x1 + rnorm(50, sd = 0.5)
plot(x1, y1, main = "(a) X e Y correlacionados positivamente", xlab = "X", ylab = "Y", pch = 19, cex.main = 1.0, xlim = c(-3, 3))
add_lines()
# (b) X and Y Moderately Correlated
x2 <- rnorm(50)
y2 <- 0.5 * x2 + rnorm(50, sd = 0.7)
plot(x2, y2, main = "(b) X e Y moderadamente correlacionados", xlab = "X", ylab = "Y", pch = 19, cex.main = 1.2)
add_lines()
# (c) X and Y Negatively Correlated
x3 <- rnorm(50)
y3 <- -x3 + rnorm(50, sd = 0.5)
plot(x3, y3, main = "(c) X e Y correlacionados negativamente", xlab = "X", ylab = "Y", pch = 19, cex.main = 1.2)
add_lines()
# (d) X and Y Not Correlated
x4 <- rnorm(50)
y4 <- rnorm(50)
plot(x4, y4, main = "(d) X e Y no correlacionados", xlab = "X", ylab = "Y", pch = 19, cex.main = 1.2)
add_lines()
# (e) X and Y Perfectly Correlated
x5 <- seq(-3, 3, length.out = 50)
y5 <- x5
plot(x5, y5, main = "(e) X e Y perfectamente correlacionados", xlab = "X", ylab = "Y", pch = 19, cex.main = 1.2)
add_lines()
# (f) X and Y Not Linearly Related
x6 <- rnorm(50)
y6 <- x6^2-3 + rnorm(50, sd = 0.2)
plot(x6, y6, main = "(f) X e Y no relacionados linealmente", xlab = "X", ylab = "Y", pch = 19, cex.main = 1.2)
add_lines()
library(tswge)
x= gen.arma.wge(n= 200,phi= c(0.1300,1.4414,- 0.0326,- 0.8865),sn= 9310)
par(mfrow= c(2,3))
plotts.wge(x)
abline(v= 100)
sample.spec.wge(x[1:100])
sample.spec.wge(x)
parzen.wge(x)
parzen.wge(x,trunc= 8)
parzen.wge(x,trunc= 175)
sample.spec.wge(x).
sample.spec.wge(x)
x= gen.arma.wge(n= 200,phi= c(0.1300,1.4414,- 0.0326,- 0.8865),sn= 9310)
# this generates an AR(4) realization (details in Chapter 5)
par(mfrow= c(2,3))
plotts.wge(x)
abline(v= 100)
sample.spec.wge(x[1:100])
library(tswge)
# Generar la serie temporal
x <- gen.arma.wge(n = 200, phi = c(0.1300, 1.4414, -0.0326, -0.8865), sn = 9310)
# Configurar el layout para las 6 gráficas
par(mfrow = c(2, 3))
# (a) Realización con dos frecuencias
plot(x, type = "l", main = "(a) Realization with Two Frequencies", xlab = "Time", ylab = "", ylim = c(-20, 20))
abline(v = 100, col = "black")
# (b) Densidad espectral muestral: n = 100
sample.spec.wge(x[1:100], main = "(b) Sample Spectral Density: n=100", dbcalc = TRUE)
library(tswge)
# Generar la serie temporal
x <- gen.arma.wge(n = 200, phi = c(0.1300, 1.4414, -0.0326, -0.8865), sn = 9310)
# Configurar el layout para las 6 gráficas
par(mfrow = c(2, 3))
plot(x, type = "l", main = "(a) Realization with Two Frequencies", xlab = "Time", ylab = "", ylim = c(-20, 20))
abline(v = 100, col = "black")
# (b) Densidad espectral muestral: n = 100
sample.spec.wge(x[1:100], main = "(b) Sample Spectral Density: n=100", dbcalc = TRUE)
sample.spec.wge(x[1:100], main = "(b) Sample Spectral Density: n=100", dbcalc = TRUE)
sample.spec.wge(x, main = "(c) Sample Spectral Density: n=200", dbcalc = TRUE)
parzen.wge(x, trunc = 28, main = "(d) Spectral Density Estimate: M=28", dbcalc = TRUE)
#| label: fig-DOW
#| fig-cap: "(a) Promedios de cierre mensuales del Dow Jones desde marzo de 1985 hasta diciembre de 2020, (b) muestras de autocorrelaciones y (c) estimación de densidad espectral de Parzen."
# Cargar el conjunto de datos
data("dow1985")
# Crear secuencia de fechas desde marzo de 1985 hasta diciembre de 2020
fechas <- seq(as.Date("1985-03-01"), as.Date("2020-12-01"),
by = "month")
fechas <- fechas[1:length(dow1985)]
par(mfrow = c(1, 3))
# a) Gráfico del Dow Jones Index
plot(fechas, dow1985, type = "l", main = "(a) DOW Jones Index",
xlab = "Year", ylab = "", xaxt = "n")
axis(1, at = seq(fechas[1], fechas[length(fechas)], by = "years"),
labels = format(seq(fechas[1], fechas[length(fechas)],
by = "years"), "%Y"))
# b) Gráfico de autocorrelación
acf(dow1985, main = "(b) Muestras de Autocorrelations",
ylab = "Autocorrelation", xlab = "Lag")
# c) Gráfico de densidad espectral
spectrum(dow1985, main = "(c) Densidad Espectral Estimada",
log = "no", xlim = c(0, 0.5), ylab = "dB",
xlab = "Frequency")
source("~/.active-rstudio-document", echo=TRUE)
vector_aleatorio <- runif(4)
print(vector_aleatorio)
vector_aleatorio <- runif(4)
print(vector_aleatorio)
vector_aleatorio <- runif(4)
print(vector_aleatorio)
vector_aleatorio <- runif(4)
print(vector_aleatorio)
set.seed(123)
vector_aleatorio <- runif(4)
print(vector_aleatorio)
set.seed(123)
vector_aleatorio <- runif(4)
print(vector_aleatorio)
set.seed(123)
vector_aleatorio <- runif(4)
print(vector_aleatorio)
library(tswge)
bitcoin
# Cargar la librería
library(tswge)
# Supongamos que tienes un vector de datos llamado 'bitcoin'
# Aquí se genera un ejemplo de datos simulados, pero debes reemplazarlos por tus datos reales.
set.seed(123) # Para reproducibilidad
bitcoin <- cumsum(runif(365, min = -500, max = 1000)) + 10000  # Ejemplo de precios de Bitcoin
# Graficar los datos con tswge
plotts.wge(bitcoin, main = "Bitcoin (May 1, 2020 - April 30, 2021)", ylab = "Bitcoin Price", xlab = "Index")
library(tswge)
bitcoin
bitcoin <- bitcoin[154:174]
# Supongamos que tienes un vector de datos llamado 'bitcoin'
# Aquí se genera un ejemplo de datos simulados, pero debes reemplazarlos por tus datos reales.
#set.seed(123) # Para reproducibilidad
#bitcoin <- cumsum(runif(365, min = -500, max = 1000)) + 10000  # Ejemplo de precios de Bitcoin
# Graficar los datos con tswge
plotts.wge(bitcoin, main = "Bitcoin (May 1, 2020 - April 30, 2021)", ylab = "Bitcoin Price", xlab = "Index")
# Cargar la librería
library(tswge)
bitcoin
#bitcoin <- bitcoin[154:174]
# Supongamos que tienes un vector de datos llamado 'bitcoin'
# Aquí se genera un ejemplo de datos simulados, pero debes reemplazarlos por tus datos reales.
set.seed(123) # Para reproducibilidad
bitcoin <- cumsum(runif(365, min = -500, max = 1000)) + 10000  # Ejemplo de precios de Bitcoin
# Graficar los datos con tswge
plotts.wge(bitcoin, main = "Bitcoin (May 1, 2020 - April 30, 2021)", ylab = "Bitcoin Price", xlab = "Index")
# Cargar la librería
library(tswge)
ts(bitcoin)
# Cargar la librería
library(tswge)
ts(bitcoin)
#bitcoin <- bitcoin[154:174]
# Supongamos que tienes un vector de datos llamado 'bitcoin'
# Aquí se genera un ejemplo de datos simulados, pero debes reemplazarlos por tus datos reales.
set.seed(123) # Para reproducibilidad
bitcoin <- cumsum(runif(365, min = -500, max = 1000)) + 10000  # Ejemplo de precios de Bitcoin
# Graficar los datos con tswge
plotts.wge(bitcoin, main = "Bitcoin (May 1, 2020 - April 30, 2021)", ylab = "Bitcoin Price", xlab = "Index")
# Cargar la librería
library(tswge)
ts(bitcoin)
#bitcoin <- bitcoin[154:174]
# Supongamos que tienes un vector de datos llamado 'bitcoin'
# Aquí se genera un ejemplo de datos simulados, pero debes reemplazarlos por tus datos reales.
set.seed(123) # Para reproducibilidad
bitcoin <- cumsum(runif(365, min = -500, max = 1000)) + 10000  # Ejemplo de precios de Bitcoin
# Graficar los datos con tswge
plotts.wge(bitcoin, main = "Bitcoin (May 1, 2020 - April 30, 2021)", ylab = "Bitcoin Price", xlab = "Index")
# Cargar la librería
library(tswge)
ts(bitcoin)
#bitcoin <- bitcoin[154:174]
# Supongamos que tienes un vector de datos llamado 'bitcoin'
# Aquí se genera un ejemplo de datos simulados, pero debes reemplazarlos por tus datos reales.
set.seed(123) # Para reproducibilidad
bitcoin <- cumsum(runif(365, min = -500, max = 1000)) + 10000  # Ejemplo de precios de Bitcoin
# Graficar los datos con tswge
plotts.wge(bitcoin, main = "Bitcoin (May 1, 2020 - April 30, 2021)", ylab = "Bitcoin Price", xlab = "Index")
# Cargar la librería
library(tswge)
ts(bitcoin)
#bitcoin <- bitcoin[154:174]
# Supongamos que tienes un vector de datos llamado 'bitcoin'
# Aquí se genera un ejemplo de datos simulados, pero debes reemplazarlos por tus datos reales.
set.seed(123) # Para reproducibilidad
bitcoin <- cumsum(runif(365, min = -500, max = 1000)) + 10000  # Ejemplo de precios de Bitcoin
# Graficar los datos con tswge
plotts.wge(bitcoin, main = "Bitcoin (May 1, 2020 - April 30, 2021)", ylab = "Bitcoin Price", xlab = "Index")
# Cargar la librería
library(tswge)
ts(bitcoin)
#bitcoin <- bitcoin[154:174]
# Supongamos que tienes un vector de datos llamado 'bitcoin'
# Aquí se genera un ejemplo de datos simulados, pero debes reemplazarlos por tus datos reales.
set.seed(123) # Para reproducibilidad
bitcoin <- cumsum(runif(365, min = -500, max = 1000)) + 10000  # Ejemplo de precios de Bitcoin
# Graficar los datos con tswge
plotts.wge(bitcoin, main = "Bitcoin (May 1, 2020 - April 30, 2021)", ylab = "Bitcoin Price", xlab = "Index")
# Cargar la librería
library(tswge)
ts(bitcoin)
#bitcoin <- bitcoin[154:174]
# Supongamos que tienes un vector de datos llamado 'bitcoin'
# Aquí se genera un ejemplo de datos simulados, pero debes reemplazarlos por tus datos reales.
set.seed(123) # Para reproducibilidad
bitcoin <- cumsum(runif(365, min = -500, max = 1000)) + 10000  # Ejemplo de precios de Bitcoin
# Graficar los datos con tswge
plotts.wge(bitcoin, main = "Bitcoin (May 1, 2020 - April 30, 2021)", ylab = "Bitcoin Price", xlab = "Index")
library(tswge)
ts(bitcoin)
plotts.wge(bitcoin)
plotts.wge(bitcoin)
plotts.wge(bitcoin)
plotts.wge(bitcoin)
plotts.wge(bitcoin)
# Cargar la librería
library(tswge)
ts(bitcoin)
#bitcoin <- bitcoin[154:174]
# Supongamos que tienes un vector de datos llamado 'bitcoin'
# Aquí se genera un ejemplo de datos simulados, pero debes reemplazarlos por tus datos reales.
set.seed(123) # Para reproducibilidad
bitcoin <- cumsum(runif(365, min = -500, max = 1000))   # Ejemplo de precios de Bitcoin
plotts.wge(bitcoin, main = "Bitcoin (May 1, 2020 - April 30, 2021)", ylab = "Bitcoin Price", xlab = "Index")
plotts.wge(bitcoin, main = "Bitcoin (May 1, 2020 - April 30, 2021)", ylab = "Bitcoin Price", xlab = "Index")
# Cargar la librería
library(tswge)
ts(bitcoin)
#bitcoin <- bitcoin[154:174]
# Supongamos que tienes un vector de datos llamado 'bitcoin'
# Aquí se genera un ejemplo de datos simulados, pero debes reemplazarlos por tus datos reales.
set.seed(123) # Para reproducibilidad
bitcoin <- cumsum(runif(365, min = -500, max = 6000))   # Ejemplo de precios de Bitcoin
# Graficar los datos con tswge
plotts.wge(bitcoin, main = "Bitcoin (May 1, 2020 - April 30, 2021)", ylab = "Bitcoin Price", xlab = "Index")
# Cargar la librería
library(tswge)
bitcoin
# Graficar los datos con tswge
plotts.wge(bitcoin, main = "Bitcoin (May 1, 2020 - April 30, 2021)", ylab = "Bitcoin Price", xlab = "Index")
library(tswge)
tesla.3= ma.smooth.wge(tesla,order= 3,plot= FALSE)
tesla.8= ma.smooth.wge(tesla,order= 8,plot= FALSE)
plot(tesla)
#| label: fig-realizacion
#| fig-cap: "Precios de las acciones de Tesla desde el 1 de enero de 2020 hasta el 30 de abril de 2021."
library(tswge)
data(tesla)
tesla.3= ma.smooth.wge(tesla,order= 3,plot= FALSE)
tesla.8= ma.smooth.wge(tesla,order= 8,plot= FALSE)
plot(tesla)
library(tswge)
tesla.3= ma.smooth.wge(tesla,order= 3,plot= FALSE)
tesla.8= ma.smooth.wge(tesla,order= 8,plot= FALSE)
plot(tesla)
#| label: fig-realizacion
#| fig-cap: "Precios de las acciones de Tesla desde el 1 de enero de 2020 hasta el 30 de abril de 2021."
library(tswge)
data(tesla)
tesla.3= ma.smooth.wge(tesla,order= 3,plot= FALSE)
tesla.8= ma.smooth.wge(tesla,order= 8,plot= FALSE)
plot(tesla)
#| label: fig-realizacion
#| fig-cap: "Precios de las acciones de Tesla desde el 1 de enero de 2020 hasta el 30 de abril de 2021."
library(tswge)
data(tesla)
tesla.3= ma.smooth.wge(tesla,order= 3,plot= FALSE)
tesla.8= ma.smooth.wge(tesla,order= 8,plot= FALSE)
plot(tesla)
library(tswge)
tesla.3= ma.smooth.wge(tesla,order= 3,plot= FALSE)
tesla.8= ma.smooth.wge(tesla,order= 8,plot= FALSE)
plot(tesla)
#| label: fig-noise
#| fig-cap: "Grafica de dos modelos AR(1) con raíces cercanas a uno en valor absoluto."
#| fig-subcap:
#|   - "Realización con  φ1 = .95"
#|   - "Realización  φ1 = .99"
#| layout-ncol: 2
library(tswge)
x=gen.arma.wge(n = 150, phi = 0.95, sn = 305)
y=gen.arma.wge(n = 150, phi = 0.99, sn = 404)
#plot(x)
#plot(y)
# Cargar la librería
library(tswge)
data(tswge)
plotts.wge(lynx)
llynx= log10(lynx)
plotts.sample.wge(llynx)
library(tswge)
# Cargar los datos de ejemplo
data(tswge)
# Aplicar la transformación logarítmica
llynx <- log10(lynx)
# Graficar la realización y las autocorrelaciones (ACF y PACF)
plotts.sample.wge(llynx, main = "Realización y Autocorrelaciones (lynx transformado)")
plotts.sample.wge(llynx, ar = FALSE, parzen = FALSE)
plotts.sample.wge(llynx)
plotts.sample.wge(llynx, ar = FALSE, parzen = FALSE)
acf(llynx)
acf(llynx, ci = 0, main = "Autocorrelación de llynx sin líneas de límite")
llynx= log10(lynx)
plotts.sample.wge(llynx)
plotts.sample(llynx)
plotts(llynx)
plotts(llynx)
plotts(llynx)
plot(llynx)
plotts.sample.wge(llynx, ar = FALSE, parzen = FALSE)
plotts.sample.wge(llynx)
plot(llynx)
# Cargar los datos de tswge
data(tswge)
# Transformar la serie temporal
llynx <- log10(lynx)
# Configurar la disposición del gráfico en 2x2
par(mfrow = c(2, 2))
# Gráfico de la serie transformada
plot(llynx, type = "l", main = "Serie transformada (log10)", ylab = "Log10 de linces", xlab = "Año")
# ACF de la serie transformada sin líneas de límite
acf(llynx, main = "ACF de llynx (sin líneas de límite)", ci = 0)
# Cargar los datos de tswge
data(tswge)
# Configurar la disposición del gráfico en 2x2
par(mfrow = c(2, 2))
# Gráfico de la serie original
plot(lynx, type = "l", main = "Serie original (lynx)", ylab = "Número de linces", xlab = "Año")
# Gráfico de la serie transformada
#plot(llynx, type = "l", main = "Serie transformada (log10)", ylab = "Log10 de linces", xlab = "Año")
# ACF de la serie transformada sin líneas de límite
acf(lynx, main = "ACF de llynx (sin líneas de límite)", ci = 0)
# Configurar la disposición del gráfico en 2x2
par(mfrow = c(2, 2))
# Gráfico de la serie original
plot(lynx, type = "l", main = "Datos sobre el lince canadiense", ylab = "Número de linces", xlab = "Año")
# Gráfico de la serie transformada
#plot(llynx, type = "l", main = "Serie transformada (log10)", ylab = "Log10 de linces", xlab = "Año")
# ACF de la serie transformada sin líneas de límite
acf(lynx, main = "ACF de llynx (sin líneas de límite)", ci = 0)
#| label: fig-noise
#| fig-cap: " Grafica de Autocurrelciones del número de linces"
#| fig-subcap:
#|   - "Datos sobre el lince canadiense"
#|   - "Autocorrelación de la muestra"
#| layout-ncol: 2
library(tswge)
data(tswge)
plot(lynx, type = "l", main = "Número de lince canadiense(1820-1934)", ylab = "Número de linces", xlab = "Año")
acf(lynx, main = " ", ci = 0)
#| label: fig-noise
#| fig-cap: " Grafica de Autocurrelciones del número de linces"
#| fig-subcap:
#|   - "Datos sobre el lince canadiense"
#|   - "Autocorrelación de la muestra"
#| layout-ncol: 2
library(tswge)
data(tswge)
plot(lynx, type = "l", main = "Número de lince canadiense(1820-1934)", ylab = "Número de linces", xlab = "Año")
acf(lynx, main = " ", ci = 0)
set.seed(123)
vector_aleatorio <- runif(4)
print(vector_aleatorio)
set.seed(123)
vector_aleatorio <- runif(4)
vector_aleatorio
set.seed(123)
vector_aleatorio <- runif(4)
vector_aleatorio
set.seed(123)
vector_aleatorio <- runif(4)
vector_aleatorio
set.seed(123)
vector_aleatorio <- runif(4)
vector_aleatorio
# [1] 0.2875775 0.7883051 0.4089769 0.8830174
set.seed(123)
vector_aleatorio <- runif(4)
print(vector_aleatorio)
# [1] 0.2875775 0.7883051 0.4089769 0.8830174
set.seed(123)
vector_aleatorio <- runif(4)
print(vector_aleatorio)
# [1] 0.2875775 0.7883051 0.4089769 0.8830174
renv::status()
knitr:::webshot_available()
install.packages("webshot")
install.packages("webshot2")
knitr:::webshot_available()
install.packages("webshot")
knitr:::webshot_available()
webshot::install_phantomjs()
renv::restore(packages = "renv")
renv::restore()
renv::status()
knitr:::webshot_available()
