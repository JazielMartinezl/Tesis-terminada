{"title":"Estudio de caso","markdown":{"yaml":{"lang":"es"},"headingText":"Estudio de caso","containsRefs":false,"markdown":"\n\n\n```{r echo=FALSE, message=FALSE, warning=FALSE}\n#setwd(\"C:/Users/chaca/Documents/Tesis/Quarto_archivos/Tesis/Tesis_escrita\" )\nlibrary(scales)\nlibrary(later)\nlibrary(tidyverse)\nlibrary(scales)\nlibrary(stats)\nlibrary(ggplot2)\nlibrary(graphics)\nlibrary(plotly)\n\n#library(webshot)\n#library(htmlwidgets)\nlibrary(purrr)\nlibrary(rlang)\nlibrary(promises)\nlibrary(readxl)\nlibrary(readr)\n\nlibrary(tseries)\nlibrary(tswge)\n\nlibrary(datasets)\nlibrary(tswge)\n\n\ndatos_clima <- read_csv(\"C:/Users/chaca/Documents/Tesis/Quarto_archivos/Tesis/Tesis_escrita/datos_clima_wsu.csv\", \n                        col_types = cols(`Date Time` = col_datetime(format = \"%d.%m.%Y %H:%M:%S\")))\n\n\ndf_clima <- data.frame(datos_clima)\n```\n\n```{r echo=FALSE, message=FALSE, warning=FALSE}\n#                Funciones graficas \ngrafico <- function(Datos_historicos,date1,date2, simulaciones_convolucional,mediana_convolucional,simulaciones_LSTM,mediana_LSTM) {\n  \n  \n  #indice_final <- length(Datos_historicos) - 7*144\n  #indice_ultimo_dato <- seq(indice_final, indice_final + length(mediana_convolucional) -1)\n  minimos_convolucional <- apply(simulaciones_convolucional, 1, min)\n  maximos_convolucional <- apply(simulaciones_convolucional, 1, max)\n  \n  \n  minimos_LSTM <- apply(simulaciones_LSTM, 1, min)\n  maximos_LSTM <- apply(simulaciones_LSTM, 1, max)\n  \n  fig1 <- plot_ly() %>%\n    add_trace(x = ~date1, y = ~Datos_historicos, type = \"scatter\", mode = \"lines\", name = \"Datos historicos\", line = list(color = \"#0F0F0F\"),showlegend = FALSE) %>%\n    layout(title = \"  \",xaxis  = list(title = \" \",tickfont = list(size = 10)),yaxis = list(title = \"Temperatura (°F)\"),showlegend = FALSE) %>%\n    add_trace(x = ~date2, y = ~mediana_LSTM, type = 'scatter', mode = 'lines', name = 'Mediana del pronóstico (LSTM)', line = list(color = 'blue'),showlegend = FALSE) %>%  \n    add_ribbons(x = ~date2, ymin = minimos_LSTM, ymax = maximos_LSTM, fillcolor = '#FFB5C5', opacity = 0.5,name = \"Pronósticos (LSTM)\", line = list(color = 'rgba(0,0,0,0)'),showlegend = FALSE) %>%\n    add_trace(x = ~date2 , y = ~mediana_convolucional, type = 'scatter', mode = 'lines', name = 'Mediana del pronóstico (CNN)', line = list(color = 'red'),showlegend = FALSE) %>%  \n    add_ribbons(x = ~date2, ymin = minimos_convolucional, ymax = maximos_convolucional, fillcolor = '#97FFFF', opacity = 0.4,name = \"Pronósticos (CNN)\", line = list(color = 'rgba(0,0,0,0)'),showlegend = FALSE) \n  # %>% \n  #   layout(legend = list(\n  #     orientation = \"h\",  # Horizontal\n  #     x = 0.5,            # Centro horizontal\n  #     xanchor = \"center\", # Anclar al centro\n  #     y = -0.2            # Por encima del gráfico\n  #   ),showlegend = FALSE)\n  # \n  return(fig1)\n}\n\n\n\ngrafico_2 <- function(Datos_historicos,date1,date2, simulaciones_convolucional,mediana_convolucional,simulaciones_LSTM,mediana_LSTM) {\n  \n  \n  #indice_final <- length(Datos_historicos3) - 4*144\n  #indice_ultimo_dato <- seq(indice_final, indice_final + length(mediana_convolucional) -1)\n  minimos_convolucional <- apply(simulaciones_convolucional, 1, min)\n  maximos_convolucional <- apply(simulaciones_convolucional, 1, max)\n  \n  minimos_LSTM <- apply(simulaciones_LSTM, 1, min)\n  maximos_LSTM <- apply(simulaciones_LSTM, 1, max)\n  \n fig1 <- plot_ly() %>%\n    add_trace(x = ~date1, y = ~Datos_historicos, type = \"scatter\", mode = \"lines\", name = \"Datos historicos\", line = list(color = \"#0F0F0F\")) %>%\n    layout(title = \"  \",xaxis  = list(title = \" \",tickfont = list(size = 10)),yaxis = list(title = \"Temperatura (°F)\")) %>%\n    add_trace(x = ~date2, y = ~mediana_LSTM, type = 'scatter', mode = 'lines', name = 'Mediana del pronóstico (LSTM)', line = list(color = 'blue')) %>%  \n    add_ribbons(x = ~date2, ymin = minimos_LSTM, ymax = maximos_LSTM, fillcolor = '#97FFFF', opacity = 0.4,name = \"Pronósticos (LSTM)\", line = list(color = 'rgba(0,0,0,0)')) %>%\n    add_trace(x = ~date2 , y = ~mediana_convolucional, type = 'scatter', mode = 'lines', name = 'Mediana del pronóstico (CNN)', line = list(color = 'red')) %>%  \n    add_ribbons(x = ~date2, ymin = minimos_convolucional, ymax = maximos_convolucional, fillcolor = '#97FFFF', opacity = 0.4,name = \"Pronósticos (CNN)\", line = list(color = 'rgba(0,0,0,0)'))%>% \n    layout(legend = list(\n      orientation = \"h\",  # Horizontal\n      x = 0.5,            # Centro horizontal\n      xanchor = \"center\", # Anclar al centro\n      y = -0.2            # Por encima del gráfico\n    ))\n  \n  return(fig1)\n}\n\n\n\ngrafico2 <- function(Datos_historicos,date1,date2, simulaciones_convolucional,mediana_convolucional,simulaciones_LSTM,mediana_LSTM) {\n  \n  \n  #indice_final <- length(Datos_historicos3) - 4*144\n  #indice_ultimo_dato <- seq(indice_final, indice_final + length(mediana_convolucional) -1)\n  minimos_convolucional <- apply(simulaciones_convolucional, 1, min)\n  maximos_convolucional <- apply(simulaciones_convolucional, 1, max)\n  \n  minimos_LSTM <- apply(simulaciones_LSTM, 1, min)\n  maximos_LSTM <- apply(simulaciones_LSTM, 1, max)\n  \n  fig1 <- plot_ly() %>%\n    add_trace(x = ~date1, y = ~Datos_historicos, type = \"scatter\", mode = \"lines\", name = \"Datos historicos\", line = list(color = \"black\")) %>%\n    layout(title = \"  \",\n           xaxis  = list(title = \" \",tickfont = list(size = 10)),\n           yaxis = list(title = \"Temperatura (°F)\")) %>%\n    add_trace(x = ~date2, y = ~mediana_LSTM, type = 'scatter', mode = 'lines', name = 'Mediana del pronóstico (LSTM)', line = list(color = 'blue')) %>%  \n    add_ribbons(x = ~date2, ymin = minimos_LSTM, ymax = maximos_LSTM, fillcolor = '#FFB5C5', opacity = 0.5,name = \"Pronósticos (LSTM)\", line = list(color = 'rgba(0,0,0,0)')) %>%\n    add_trace(x = ~date2 , y = ~mediana_convolucional, type = 'scatter', mode = 'lines', name = 'Mediana del pronóstico (CNN)', line = list(color = 'red')) %>%  \n    add_ribbons(x = ~date2, ymin = minimos_convolucional, ymax = maximos_convolucional, fillcolor = '#97FFFF', opacity = 0.4,name = \"Pronósticos (CNN)\", line = list(color = 'rgba(0,0,0,0)'))%>% \n    layout(legend = list(\n      orientation = \"h\",  # Horizontal\n      x = 0.5,            # Centro horizontal\n      xanchor = \"center\", # Anclar al centro\n      y = -0.03            # Por encima del gráfico\n    ))\n  \n  return(fig1)\n}\n\n\n\nannotations = list( \n  list( \n    x = -0.05,  \n    y = 1.0,  \n    text = \"180 días\",  \n    xref = \"paper\",  \n    yref = \"paper\",  \n    xanchor = \"center\",  \n    yanchor = \"bottom\",  \n    showarrow = FALSE,\n    font = list(\n      size = 12,        # Tamaño del texto\n      color = \"black\",  # Color del texto\n      family = \"Arial\", # Familia de la fuente\n      bold = TRUE       # Negrita\n    )\n  ),  \n  list( \n    x = 0.52,  \n    y = 1.0,  \n    text = \" 90 días\",  \n    xref = \"paper\",  \n    yref = \"paper\",  \n    xanchor = \"center\",  \n    yanchor = \"bottom\",  \n    showarrow = FALSE,\n    font = list(\n      size = 12,        # Tamaño del texto\n      color = \"black\",  # Color del texto\n      family = \"Arial\", # Familia de la fuente\n      bold = TRUE       # Negrita\n    )\n  ),  \n  list( \n    x = -0.05,  \n    y = 0.45,  \n    text = \"30 días\",  \n    xref = \"paper\",  \n    yref = \"paper\",  \n    xanchor = \"center\",  \n    yanchor = \"bottom\",  \n    showarrow = FALSE,\n    font = list(\n      size = 12,        # Tamaño del texto\n      color = \"black\",  # Color del texto\n      family = \"Arial\", # Familia de la fuente\n      bold = TRUE       # Negrita\n    )\n  ),\n  list( \n    x = 0.52,  \n    y = 0.45,  \n    text = \"15 días\",  \n    xref = \"paper\",  \n    yref = \"paper\",  \n    xanchor = \"center\",  \n    yanchor = \"bottom\",  \n    showarrow = FALSE,\n    font = list(\n      size = 12,        # Tamaño del texto\n      color = \"black\",  # Color del texto\n      family = \"Arial\", # Familia de la fuente\n      bold = TRUE       # Negrita\n    )\n  ))\n```\n\n```{r echo=FALSE, message=FALSE, warning=FALSE}\n#setwd(\"C:/Users/chaca/Documents/Tesis/Quarto_archivos/Tesis/Tesis_escrita\" )\n\n\n```\n\n## Descripción del problema\n\nLa modelación de las variables climaticas permite el entendimiento y la generación del pronóstico climático de una región para la planificación territorial, agricultura, ecología, análisis y la conservación de los recursos naturales.\n\nEn el presente estudio, se utilizó un conjunto de datos climáticos que fueron consultados del 01 de Enero del 2009 al 01 de Enero del 2012. Con la finalidad de comprobar la utilidad y eficacia de dos modelos adecuados de redes neuronales: LTSM y la red neuronal convolucional (CNN). Para el pronóstico de datos climáticos modelados como series de tiempo.\n\n### Origen de los datos\n\n::: {style=\"text-align: justify\"}\nSe emplea un conjunto de datos con información climática que fue grabada con el objetivo de ser analizada en la estación climática en el Instituto de Biogeoquimica Max Planck en Jena, Alemania. El mismo contiene todas las variables medidas con su correspondiente instrumento (tal como temperatura del aire, presión atmosférica, humedad, dirección del viento, etc) grabadas cada 10 minutos, a lo largo de varios años. El cual está disponible para su descarga en <https://www.bgc-jena.mpg.de/wetter/weather_data.html> .\n\nDe los 14 datos diferentes, se seleccionan 5 teniendo en cuenta factores como su rango y sus patrones estacionales.\n\nLas variables seleccionadas son las siguientes:\n\n-   $p( mbar )$ - Presión del aire.\n\n-   $T( ° C )$ - Temperatura del aire.\n\n-   $rh( \\% )$ - Humedad relativa.\n\n-   $rho(g/m^3$) - Densidad del aire\n\n-   $wv(m/s)$ - Velocidad del viento.\n\n<!-- Se presentan las 5 variables en su serie temporal. -->\n:::\n\n## Limpieza y procesamiento de datos\n\n::: {style=\"text-align: justify\"}\nLos datos recopilados fueron sometidos a un proceso exhaustivo de limpieza y preprocesamiento. <!-- Para conformar la base de datos que se utilizo,  --> En este paso se detectó el intervalo de tiempo en el que mejor se comportarán los datos históricos, por ello se asignó un conjunto de datos históricos omitiendo los primeros 7 días, así como la estandarización y normalización de las 5 variables mas relevantes. Esto con el objetivo de obtener un mejor pronóstico de los datos a futuro.\n:::\n\n## Pronóstico mediante red neuronales\n\n### Modelamiento y pronóstico mediante redes neuronales para series de tiempo unidimensionales\n\n::: {style=\"text-align: justify\"}\nSe presentan las gráficas de los datos históricos de las 5 variables elegidas.\n:::\n\n:::: {.content-visible when-format=\"html\"}\n::: {#fig-Temperatura_ts}\n```{r echo=TRUE, message=FALSE, warning=FALSE}\n\nTemp<-df_clima$T..degC.\nTemp <-Temp +273.15\nDatos_historicos <- Temp \nX<- df_clima$Date.Time\nfig <- plot_ly() %>%\n  add_trace(x = ~X, y = ~Datos_historicos, type = \"scatter\", mode = \"lines\", name = \"Temperatura\", line = list(color = '#63B8FF')) %>%\n  layout(title = \" \",\n         xaxis = list(title = \" \"),\n         yaxis = list(title = \"Temperatura (°F)\")) \nfig\n\n```\n\nSerie de tiempo de la Temperatura (° F) del 01 de Enero del 2009 al 01 de Enero del 2012.\n:::\n::::\n\n:::: {.content-visible when-format=\"html\"}\n::: {#fig-paire_ts}\n```{r echo=TRUE, message=FALSE, warning=FALSE}\n\np_aire <-df_clima$p..mbar. #presion del aire\nX<- df_clima$Date.Time\nfig <- plot_ly() %>%\n  add_trace(x = ~X, y = ~p_aire, type = \"scatter\", mode = \"lines\", name = \"presión aire\", line = list(color = '#63B8FF')) %>%\n  layout(title = \" \",\n         xaxis = list(title = \" \"),\n         yaxis = list(title = \"mbar\")) \nfig\n\n```\n\nSerie de tiempo de la presión del aire p (mbar) del 01 de Enero del 2009 al 01 de Enero del 2012.\n:::\n::::\n\n:::: {.content-visible when-format=\"html\"}\n::: {#fig-hrelativa_ts}\n```{r echo=TRUE, message=FALSE, warning=FALSE}\nh_relativa<-df_clima$rh.... #humedad relativa\nX<- df_clima$Date.Time\nfig <- plot_ly() %>%\n  add_trace(x = ~X, y = ~h_relativa, type = \"scatter\", mode = \"lines\", name = \"Humedad relativa\", line = list(color = '#63B8FF')) %>%\n  layout(title = \" \",\n         xaxis = list(title = \" \"),\n         yaxis = list(title = \"Porcentaje\")) \nfig\n\n```\n\nSerie de tiempo de la humedad relativa rh (%) del 01 de Enero del 2009 al 01 de Enero del 2012.\n:::\n::::\n\n:::: {.content-visible when-format=\"html\"}\n::: {#fig-daire_ts}\n```{r echo=TRUE, message=FALSE, warning=FALSE}\nd_aire<-df_clima$rho..g.m..3. # Densidad del aire \nX<- df_clima$Date.Time\nfig <- plot_ly() %>%\n  add_trace(x = ~X, y = ~d_aire, type = \"scatter\", mode = \"lines\", name = \"Humedad relativa\", line = list(color = '#63B8FF')) %>%\n  layout(title = \" \",\n         xaxis = list(title = \" \"),\n         yaxis = list(title = \"g /m³\")) \nfig\n\n```\n\nSerie de tiempo de la densidad del aire rho ($g /m^3$) del 01 de Enero del 2009 al 01 de Enero del 2012.\n:::\n::::\n\n:::: {.content-visible when-format=\"html\"}\n::: {#fig-viento_ts}\n```{r echo=TRUE, message=FALSE, warning=FALSE}\nv_viento <-df_clima$wv..m.s. # Velocidad del viento\nX<- df_clima$Date.Time\nfig <- plot_ly() %>%\n  add_trace(x = ~X, y = ~v_viento, type = \"scatter\", mode = \"lines\", name = \"Humedad relativa\", line = list(color = '#63B8FF')) %>%\n  layout(title = \" \",\n         xaxis = list(title = \" \"),\n         yaxis = list(title = \"g/m\")) \nfig\n\n```\n\nSerie de tiempo de la velocidad del viento wv ($m/s$) del 01 de Enero del 2009 al 01 de Enero del 2012.\n:::\n::::\n\n::: {.content-visible when-format=\"pdf\"}\n```{r, echo=FALSE}\n#| label: fig-Temperatura_tspdf\n#| fig-cap: \"Serie de tiempo de la Temperatura(° F) del 01 de Enero del 2009 al 01 de Enero del 2012.\"\n \nfig <- ggplot(data = df_clima, aes(x = X, y = Datos_historicos)) +\n  geom_line(color = '#63B8FF') +\n  labs(title = \"\", x = \"\", y = \"Temperatura (° F)\") +\n  theme_minimal()\nplot(fig)\n```\n:::\n\n::: {.content-visible when-format=\"pdf\"}\n```{r, echo=FALSE}\n#| label: fig-paire_tspdf\n#| fig-cap: \"Serie de tiempo de la presión del aire p(mbar) del 01 de Enero del 2009 al 01 de Enero del 2012.\"\n \nfig <- ggplot(data = df_clima, aes(x = X, y = p_aire)) +\n  geom_line(color = '#63B8FF') +\n  labs(title = \"\", x = \"\", y = \"mbar\") +\n  theme_minimal()\nplot(fig)\n```\n:::\n\n::: {.content-visible when-format=\"pdf\"}\n```{r, echo=FALSE}\n#| label: fig-hrelativa_tspdf\n#| fig-cap: \"Serie de tiempo de la humedad relativa rh (%) del 01 de Enero del 2009 al 01 de Enero del 2012.\"\n \nfig <- ggplot(data = df_clima, aes(x = X, y = h_relativa)) +\n  geom_line(color = '#63B8FF') +\n  labs(title = \"\", x = \"\", y = \"porcentaje\") +\n  theme_minimal()\nplot(fig)\n```\n:::\n\n::: {.content-visible when-format=\"pdf\"}\n```{r, echo=FALSE}\n#| label: fig-daire_tspdf\n#| fig-cap: \"Serie de tiempo de la densidad del aire rho($g /m^3$) del 01 de Enero del 2009 al 01 de Enero del 2012.\"\n \nfig <- ggplot(data = df_clima, aes(x = X, y = d_aire)) +\n  geom_line(color = '#63B8FF') +\n  labs(title = \"\", x = \"\", y = \"g/ m³\") +\n  theme_minimal()\nplot(fig)\n```\n:::\n\n::: {.content-visible when-format=\"pdf\"}\n```{r, echo=FALSE}\n#| label: fig-viento_tspdf\n#| fig-cap: \"Serie de tiempo de la velocidad del viento wv($m/ s$) del 01 de Enero del 2009 al 01 de Enero del 2012.\"\n \nfig <- ggplot(data = df_clima, aes(x = X, y = v_viento)) +\n  geom_line(color = '#63B8FF') +\n  labs(title = \"\", x = \"\", y = \"m/ s\") +\n  theme_minimal()\nplot(fig)\n```\n:::\n\n::: {.content-visible when-format=\"pdf\" style=\"text-align: justify\"}\n\\newpage\n:::\n\n#### Estacionalidad\n\n::: {style=\"text-align: justify\"}\nCon el propósito de llevar a cabo una inspección visual y analítica de los datos y al mismo tiempo una descripción preliminar, se busca identificar los patrones de estacionalidad anual y diaria. Esto se puede apreciar claramente en los gráficos de [autocorrelación](series.qmd#sec-autocorrelación). Para calcular la autocorrelación en R se utiliza la función acf(). Esta función proporciona estimaciones gráficamente de la autocorrelación que se puede representar el conjunto de datos históricos de la Temperatura (° F).\n:::\n\n::: {.content-visible when-format=\"pdf\" style=\"text-align: justify\"}\nEl código que genera la autocorrelación es el siguiente :\n:::\n\n::: {#fig-Temp200}\n```{r,echo=TRUE, message=FALSE, warning=FALSE}\nacf(df_clima$T..degC., lag.max = 200, \n    main = \"Autocorrelación de Temperatura\")\n\n```\n\nAutocorrelación de los primeros 200 datos correspondiente a la Temperatura (° F) en su serie temporal.\n:::\n\n::: {style=\"text-align: justify\"}\nEn @fig-Temp200 se observa que la autocorrelación los primeros 200 datos correspondiente a la Temperatura (° F) vistas como serie temporal. Teniendo en cuenta que el intervalo temporal entre observaciones es de 10 minutos, el patrón cíclico que se observa cada 144 observaciones corresponde al transcurso de 24 horas.\n:::\n\n::: {#fig-Temp1000}\n```{r,echo=TRUE, message=FALSE, warning=FALSE}\nacf(df_clima$T..degC., lag.max = 1000, \n    main = \"Autocorrelación de Temperatura\")\n\n```\n\nAutocorrelación de los primeros 1000 datos correspondiente a la Temperatura (° F) en su serie temporal.\n:::\n\n::: {style=\"text-align: justify\"}\nEn @fig-Temp200 se observa que la autocorrelación los primeros 1000 datos correspondiente a la Temperatura (° F) en su serie temporal.\n:::\n\n::: {#fig-Temp100000}\n```{r,echo=TRUE, message=FALSE, warning=FALSE}\nacf(df_clima$T..degC., lag.max = 100000, \n    main = \"Autocorrelación de Temperatura\")\n\n```\n\nAutocorrelación de los primeros 100000 datos correspondiente a la Temperatura (° F) en su serie temporal.\n:::\n\n::: {style=\"text-align: justify\"}\nEn la @fig-Temp100000 podemos deducir que los datos históricos siguen un patrón cíclico que se observa es aproximadamente cada 52000 observaciones, es decir, corresponde al transcurso de un año.\n:::\n\n#### Prueba KPSS (Kwiatkowski-Phillips-Schmidt-Shin)\n\n::: {style=\"text-align: justify\"}\nA continuación, se emplea la prueba de Kwiatkowski-Phillips-Schmidt-Shin ([KPSS](series.qmd#sec-KPSS)) para examinar la presencia de estacionariedad en la serie temporal. Este test fué utilizado con la finalidad de identificar la existencia de [raices unitarias](series.qmd#sec-raices-unitarias) en la serie, lo cual permite inferir la presencia o ausencia de [estacionariedad](series.qmd#sec-series-estacionales) en los datos analizados.\n:::\n\nLa hipótesis nula y la alternativa para la prueba KPSS son:\n\n$$H_0:  El \\ modelo \\ es \\ estacionario\n\\ \\ \\qquad H_1: El \\  modelo \\  no \\ es \\  estacionario$$\n\n```{r,echo=TRUE, message=FALSE, warning=FALSE}\n#library(tseries)\nTemperatura_ts <-datos_clima$`T (degC)`[1:105120] #Temperatura\nkpss.test(Temperatura_ts, null = \"Trend\")\n```\n\n::: {style=\"text-align: justify\"}\nLa hipótesis nula $H_0$ no asume la presencia de raíces unitarias, lo que indica no estacionariedad en la serie, al obtener un KPSS estadístico superior que el nivel de significancia establecido el cual es de $5 \\%$ ($0.05$), se rechaza la hipótesis nula, sugiriendo la ausencia de estacionariedad en la serie de tiempo de Temperatura (° F). Por lo que vamos a utilizar técnicas para obtener la estacionariedad de la serie de tiempo.\n\nLuego, para hacer estacionarios los datos se aplicaron las siguientes transformaciones:\n:::\n\n#### Diferenciación\n\n::: {style=\"text-align: justify\"}\nSe aplicó las diferencias a los datos de Temperatura (° F) para buscar la estacionalidad de la serie de Tiempo.\n:::\n\n::: {#fig-Temp_diferencias}\n```{r,echo=TRUE, message=FALSE, warning=FALSE}\n#library(tswge)\nd_Temperatura = artrans.wge(Temperatura_ts,phi.tr= 1)\n```\n\nDiferencias de los datos de Temperatura (° F) en su serie temporal.\n:::\n\n::: {style=\"text-align: justify\"}\nEn la @fig-Temp_diferencias se observa que después de aplicar diferencias a los datos de Temperatura (° F) observamos que la serie presenta estacionalidad.\n:::\n\n<!-- y de la prueba Kpss en la cual no se rechaza (la serie es estacionaria). -->\n\n```{r,echo=TRUE, message=FALSE, warning=FALSE}\n#library(tseries)\n#d2_Temperatura = artrans.wge(d_Temperatura,phi.tr= 1)\nkpss.test(d_Temperatura, null = \"Trend\")\n```\n\n::: {style=\"text-align: justify\"}\nAl aplicar la prueba KPSS a las diferencias a los datos de Temperatura (°F) en su serie de tiempo, se obtiene un kpss estadístico menor devuelto por el test, no se rechaza la hipótesis nula, confirmando la estacionariedad en la serie de tiempo de la Temperatura (°F).\n:::\n\n#### Estandarización\n\n::: {style=\"text-align: justify\"}\nPara que los datos sean comparables, es necesario estandarizarlos. Se ajustan los datos históricos en su serie de tiempo para que su media sea 0 y su desviación estándar sea 1.\n:::\n\n```{r echo=FALSE, message=FALSE, warning=FALSE, attr.output='style=\"max-height: 300px;\"'}\nE_temperatura <- scale(d_Temperatura)\nE_temperatura[1:100]\n```\n\n#### Normalización\n\n::: {style=\"text-align: justify\"}\nEsta transformación modifica la escala de los datos a un nuevo rango entre 0 y 1.\n:::\n\n```{r echo=FALSE, message=FALSE, warning=FALSE, attr.output='style=\"max-height: 300px;\"'}\nnormalizar <- function(vector) {\n  min_value <- 0\n  max_value <- 1\n  min_vector <- min(vector)\n  max_vector <- max(vector)\n  vector_normalizado <- (vector - min_vector) / (max_vector - min_vector) * (max_value - min_value) + min_value\n  return(vector_normalizado)\n}\n\nnormalizar(E_temperatura[1:100])\n```\n\n::: {style=\"text-align: justify\"}\nLuego del ajuste preliminar de los datos históricos en su serie de tiempo, se realizó una separación de los datos en dos grupos. Uno para entrenamiento y otro para testeo.\n:::\n\n## Implementación de la red neuronal LSTM {#sec-implementación-de-la-red-neuronal-lstm}\n\n::: {style=\"text-align: justify\"}\nEn esta parte, se realizó el siguiente ajuste para su implementación en lenguaje Python dentro del alterno [Colaboratory](Estadistica.qmd#sec-colab) de los servicios gratuitos de google.\n:::\n\n### Pronóstico mediante técnica rodante\n\nDe las los 144 datos por día. En cada paso, se actualiza la secuencia de entrada eliminando el valor más antiguo y agregando el último pronóstico como el valor más reciente. Esto se ilustra esquemáticamente en la @fig-rodante, donde $n$ es la longitud rodante de la secuencia de entrada y $T$ es la longitud de la serie Temporal.\n\n::: {#fig-rodante}\n$$\n\\begin{split}\ny:\\text{Observado}\\quad &\\quad \\hat{y}:\\text{Pronosticado}\\\\\ny_{T-n+1}\\quad y_{T-n+2}\\quad y_{T-n+3}\\quad&\\cdots\\quad y_{T-2}\\quad y_{T-1}\\quad y_T\\quad \\to\\quad \\color{orange}{\\hat{y}_{T+1}}\\\\\ny_{T-n+2}\\quad y_{T-n+3}\\quad y_{T-n+4}\\quad&\\cdots\\quad y_{T-1}\\quad y_{T}\\quad \\color{orange}{\\hat{y}_{T+1}}\\quad \\to\\quad \\color{orange}{\\hat{y}_{T+2}}\\\\\ny_{T-n+3}\\quad y_{T-n+4}\\quad y_{T-n+5}\\quad&\\cdots\\quad y_{T}\\quad \\color{orange}{\\hat{y}_{T+1}}\\quad \\color{orange}{\\hat{y}_{T+2}}\\quad \\to\\quad \\color{orange}{\\hat{y}_{T+3}}\\\\\ny_{T-n+4}\\quad y_{T-n+5}\\quad y_{T-n+6} \\quad & \\cdots\\quad\\color{orange}{\\hat{y}_{T+1}}\\quad\\color{orange}{\\hat{y}_{T+2}}\\quad\\color{orange}{\\hat{y}_{T+3}}  \\to\\quad \\color{orange}{\\hat{y}_{T+4}}\\\\\n&\\ddots \\\\\n\\end{split}\n$$\n:::\n\n### Entrenamiento y calibración del modelo LSTM\n\n::: {style=\"text-align: justify\"}\nSe procede al entrenamiento del modelo LSTM. La cantidad de capas ocultas son 3. La primera capa LSTM, es una capas LSTM con 50 unidades (neuronas). La segunda capa LSTM posee las mismas propiedades que la capa anterior. Y la tercera capa, es una una capa densa de salida. El tamaño del lote (batch size) es de 157, indica el número de muestras que se usarán para actualizar los pesos del modelo en cada paso de entrenamiento. Esta configuración se llevó a cabo con una función de activación [Adam](redes.qmd#sec-Adam), ejecutando 100 iteraciones para el entrenamiento de la red neuronal. La función de pérdida utilizada es el error cuadrático medio ([MSE](series.qmd#sec-MSE)).\n\nA continuación se exhibe el código utilizado.\n:::\n\n```{python,echo=TRUE, message=FALSE, warning=FALSE, eval = FALSE }\n# univariate cnn example\nimport numpy as np\nimport pandas as pd\nimport tensorflow as tf\nfrom tensorflow.keras.layers import Dense, LSTM\nfrom tensorflow.keras.models import Sequential\nfrom sklearn.preprocessing import MinMaxScaler\npd.options.mode.chained_assignment = None\ntf.random.set_seed(0)\n\n\n\nfrom google.colab import drive\ndrive.mount('/content/drive')\n\n# Leer set de datos\nruta = '/content/drive/My Drive/Colab Notebooks/'\ndf = pd.read_csv(ruta+'datos_clima_wsu.csv')\nTimes = df['Date Time'] # Date\nTemperatura = df['T(C°)'] #Valiable\n#Tamaño de los Datos históricos\nTemperatura = Temperatura[(7*144):(22*144)] \nTemperatura = Temperatura + 273.15 \ny = pd.DataFrame({'Times': Times, 'Temperatura': Temperatura})\n# Convertir la columna 'fecha' al formato datetime de pandas\ny['Times'] = pd.to_datetime(y['Times'], format='%d.%m.%Y %H:%M:%S')\n\n# Establecer la columna 'fecha' como el índice de la serie de tiempo\ny.set_index('Times', inplace=True)\ny = y['Temperatura'].fillna(method='ffill')\ny = y.values.reshape(-1, 1)\n# Escalamos los datos\nscaler = MinMaxScaler(feature_range=(0, 1))\nscaler = scaler.fit(y)\ny = scaler.transform(y)\n```\n\n::: {.content-visible when-format=\"pdf\" style=\"text-align: justify\"}\n``` python\n# CNN para datos univariados \nimport numpy as np\nimport pandas as pd\nimport tensorflow as tf\nfrom tensorflow.keras.layers import Dense, LSTM\nfrom tensorflow.keras.models import Sequential\nfrom sklearn.preprocessing import MinMaxScaler\npd.options.mode.chained_assignment = None\ntf.random.set_seed(0)\n\nimport matplotlib.pyplot as plt\n\n# Grafica el Loss\ndef train_and_plot_loss(model, X, y, epochs=100, verbose=2):\n    history = model.fit(X, Y, epochs=100, \n    batch_size=314, verbose=2, shuffle=False)\n\n\n    # Graficar el loss\n    plt.plot(history.history['loss'])\n    plt.title('Model Loss')\n    plt.xlabel('Epoch')\n    plt.ylabel('Loss')\n    plt.show()\n\nfrom google.colab import drive\ndrive.mount('/content/drive')\n\n# Leer set de datos\nruta = '/content/drive/My Drive/Colab Notebooks/'\ndf = pd.read_csv(ruta+'datos_clima_wsu.csv')\nTimes = df['Date Time'] # Date\nTemperatura = df['T(C°)'] #Valiable\n#Tamaño de los Datos historicos\nTemperatura = Temperatura[(7*144):(22*144)] \nTemperatura = Temperatura + 273.15 \ny = pd.DataFrame({'Times': Times, 'Temperatura': Temperatura})\n# Convertir la columna 'fecha' al formato datetime de pandas\ny['Times'] = pd.to_datetime(y['Times'], format='%d.%m.%Y %H:%M:%S')\n\n# Establecer la columna 'fecha' como el índice de la serie de tiempo\ny.set_index('Times', inplace=True)\ny = y['Temperatura'].fillna(method='ffill')\ny = y.values.reshape(-1, 1)\n# Escalamiento de  los datos\nscaler = MinMaxScaler(feature_range=(0, 1))\nscaler = scaler.fit(y)\ny = scaler.transform(y)\n\n# generar las secuencias de entrada y salida\nn_lookback = 6*144  #Secuancia de entrada\n# Secuancia de salida (o Número de predicciones)\nn_forecast = 144*4 \n\n# Inicializar DataFrame para almacenar los resultados\nresultados_df = pd.DataFrame()\nk = 50\n# Genera (k) simulaciones de la predicción\nfor repeticion in range(k):\n    X = []\n    Y = []\n\n    for i in range(n_lookback, len(y) - n_forecast + 1):\n        X.append(y[i - n_lookback: i])\n        Y.append(y[i: i + n_forecast])\n\n    X = np.array(X)\n    Y = np.array(Y)\n\n    # Crea el modelo\n    model = Sequential()\n    model.add(LSTM(units=50, return_sequences=True,\n              input_shape=(n_lookback, 1)))\n    model.add(LSTM(units=50))\n    model.add(Dense(n_forecast))\n    model.compile(loss='mean_squared_error', optimizer='adam')\n    #Entrenamiento del modelo\n    train_and_plot_loss(model, X, y, epochs=100, verbose=2)\n    \n\n    # Genera los pronósticos\n    X_ = y[-n_lookback:]\n    X_ = X_.reshape(1, n_lookback, 1)\n\n    Y_ = model.predict(X_).reshape(-1, 1)\n    Y_ = scaler.inverse_transform(Y_)\n\n    # Agregar resultados al DataFrame\n    resultados_df[f'Repeticion_{repeticion + 1}'] = Y_.flatten()\n\n# Mostrar el DataFrame con los resultados\nprint(resultados_df)\n```\n:::\n\n![Gráfica de la función de pérdida para la red neuronal LSTM](LOSS_LSTM.png){#fig-loss_LSTM}\n\n::: {style=\"text-align: justify\"}\nEn la @fig-loss_LSTM se observa la trayectoria del valor de la [función de pérdida](redes.qmd#sec-función-de-perdida) en cada época del entrenamiento en la red neuronal LSTM.\n:::\n\n## Implementación de la red neuronal convolucional (CNN) {#sec-implementación-de-la-red-neuronal-cnn.}\n\n::: {style=\"text-align: justify\"}\nEn esta parte, se realizó el mismo ajuste que en la red neuronal LSTM para su implementación en Python dentro de un servidor gratuito de [Colaboratory](Estadistica.qmd#sec-colab).\n\nSe procede al entrenamiento de la red neuronal convolucional (CNN). <!-- En esta parte se dividió en varios casos.  --> La cantidad de capas ocultas son 5 capas, de las cuales, la primera capa es una capa es convolucional unidimensional, donde va aprender a través de 64 mapas de características y con un tamaño de [kernel](redes.qmd#sec-kernel) de dimensión 5. La segunda capa es una Capa [Max-pooling](redes.qmd#sec-pooling) unidimensional, la tercera capa es una capa de aplanar ([flatten](redes.qmd#sec-fratten)), la cuarta capa es una capa Densa, la quinta capa es Densa (salida). Asimismo, se eligió la función de activación [ReLu](redes.qmd#sec-Relu), y el proceso de entrenamiento del modelo se ejecutó a lo largo de 25 iteraciones, 70 iteraciones y 100 iteraciones según los datos históricos.\n\nA continuación se exhibe el código utilizado.\n:::\n\n```{python,echo=TRUE, message=FALSE, warning=FALSE, eval = FALSE }\n# univariate cnn example\nfrom numpy import array\nfrom keras.models import Sequential\nfrom keras.layers import Dense\nfrom keras.layers import Flatten\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Conv1D, MaxPooling1D, Flatten, Dense\nfrom tensorflow.keras.optimizers import RMSprop\nimport matplotlib.pyplot as plt\nfrom keras import backend as K\n\nimport numpy as np\nimport pandas as pd\nimport yfinance as yf\nimport tensorflow as tf\nfrom tensorflow.keras.layers import Dense, LSTM\nfrom tensorflow.keras.models import Sequential\nfrom sklearn.preprocessing import MinMaxScaler \n\n\n# split a univariate sequence into samples\ndef split_sequence(sequence, n_steps):\n    X, y = list(), list()\n    for i in range(len(sequence)):\n        # find the end of this pattern\n        end_ix = i + n_steps\n        # check if we are beyond the sequence\n        if end_ix > len(sequence)-1:\n            break\n        # gather input and output parts of the pattern\n        seq_x, seq_y = sequence[i:end_ix], sequence[end_ix]\n        X.append(seq_x)\n        y.append(seq_y)\n    return array(X), array(y)\n\n\ndef train_and_plot_loss(model, X, y, epochs=20, verbose=1):\n    history = model.fit(X, y, epochs=epochs, verbose=verbose)\n    # Graficar el loss\n    plt.plot(history.history['loss'])\n    plt.title('Model Loss')\n    plt.xlabel('Epoch')\n    plt.ylabel('Loss')\n    plt.show()\n\n    \n    \nfrom google.colab import drive\ndrive.mount('/content/drive')\n\n\n# Leer set de datos\nruta = '/content/drive/My Drive/Colab Notebooks/'\ndf = pd.read_csv(ruta+'datos_clima_wsu.csv')\n\nTemperatura = df['T(C°)'] #Valiable\n#Tamaño de los Datos historicos\nTemperatura = Temperatura[(7*144):(37*144)] \nTemperatura = Temperatura + 273.15 \n\n# Escalar los datos entre 0 y 1\nscaler = MinMaxScaler(feature_range=(0, 1))\nDatos_historicos = scaler.fit_transform(Temperatura.values.reshape(-1, 1))\n\n\n```\n\n::: {.content-visible when-format=\"pdf\" style=\"text-align: justify\"}\n``` python\n# univariate cnn example\nfrom numpy import array\nfrom keras.models import Sequential\nfrom keras.layers import Dense\nfrom keras.layers import Flatten\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Conv1D, MaxPooling1D, Flatten, Dense\nfrom tensorflow.keras.optimizers import RMSprop\nimport matplotlib.pyplot as plt\nfrom keras import backend as K\n\nimport numpy as np\nimport pandas as pd\nimport tensorflow as tf\nfrom tensorflow.keras.layers import Dense, LSTM\nfrom tensorflow.keras.models import Sequential\nfrom sklearn.preprocessing import MinMaxScaler    \n\n\n#Divide una secuencia univariada en muestras\ndef split_sequence(sequence, n_steps):\n    X, y = list(), list()\n    for i in range(len(sequence)):\n        # Encuentra el final de este patrón\n        end_ix = i + n_steps\n        #Comprueba si se está más allá de la secuencia\n        if end_ix > len(sequence)-1:\n            break\n        #Reune las partes de entrada y salida del patrón\n        seq_x, seq_y = sequence[i:end_ix], sequence[end_ix]\n        X.append(seq_x)\n        y.append(seq_y)\n    return array(X), array(y)\n\ndef train_and_plot_loss(model, X, y, epochs=20, verbose=1):\n    history = model.fit(X, y, epochs=epochs, verbose=verbose)\n    # Graficar el loss\n    plt.plot(history.history['loss'])\n    plt.title('Model Loss')\n    plt.xlabel('Epoch')\n    plt.ylabel('Loss')\n    plt.show()\n\n    \n#Ubica el Drive del archivo    \nfrom google.colab import drive\ndrive.mount('/content/drive')\n\n\n# Leer set de datos\nruta = '/content/drive/My Drive/Colab Notebooks/'\ndf = pd.read_csv(ruta+'datos_clima_wsu.csv')\nTemperatura = df['T(C°)'] #Valiable\n#Tamaño de los Datos históricos\nTemperatura = Temperatura[(7*144):(37*144)] \nTemperatura = Temperatura + 273.15 \n\n# Se escalan los datos entre 0 y 1\nscaler = MinMaxScaler(feature_range=(0, 1))\nDatos_historicos = scaler.fit_transform(Temperatura.values.reshape(-1, 1))\n```\n\n``` python\n#Define la secuencia de entrada\nraw_seq = Datos_historicos  \n# Cantidad de pasos de tiempo\nn_steps = 144\n# se divide las muestras\nX, y = split_sequence(raw_seq, n_steps)\nn_features = 1\n#[muestras, pasos de tiempo, características]\nX = X.reshape((X.shape[0],X.shape[1], n_features))  \n# Crear un modelo secuencial\nmodel = Sequential()\nmodel.add(Conv1D(64, kernel_size=5, \n  activation='relu',input_shape=(n_steps, n_features)))\nmodel.add(MaxPooling1D(pool_size=5))\nmodel.add(Flatten())\nmodel.add(Dense(50, activation='relu'))\nmodel.add(Dense(1))\nmodel.compile(optimizer=RMSprop(clipvalue=1.0), loss='mae')\n# Entreniento\ntrain_and_plot_loss(model, X, y, epochs=100, verbose=1)\n```\n:::\n\n![Gráfica de la función de pérdida obtenida mediante una CNN con el conjunto de datos históricos de la variable Temperatura (°F).](loss_convolucional.png){#fig-loss_cnn}\n\n::: {style=\"text-align: justify\"}\nEn la @fig-loss_cnn se muestra la variación del valor de la [función de pérdida](redes.qmd#sec-función-de-perdida) a lo largo del entrenamiento de la red neuronal convolucional (CNN).\n:::\n\n::: {.content-visible when-format=\"pdf\" style=\"text-align: justify\"}\n``` python\nnum_simulaciones = 50\nsimulaciones_df = pd.DataFrame()\n\nprediccion = []\n# Preparación de datos de entrada para la predicción\nx_input = y[(144*28):(144*29)]\nn = len(x_input)\nn_steps = 144\nn_features = 1\nx_input =  x_input.reshape((1, n_steps, n_features))\n\n# Predicción con el modelo entrenado\nyhat = model.predict(x_input, verbose=0).reshape(-1,1)\naux= yhat\naux = scaler.inverse_transform(aux)\n\n\nfor sim in range(num_simulaciones):\n    k = 144*4\n    prediccion = []\n    i = 0\n    for _ in range(k):\n        x_new = yhat[-n_steps:]\n        x_input = np.append(x_input, x_new)\n        x_input = x_input[-n_steps:]\n        x_input = x_input.reshape((1, len(x_input), n_features))\n        yhat = model.predict(x_input, verbose=0).reshape(-1,1)\n        aux= yhat\n        aux = scaler.inverse_transform(aux)\n        prediccion.append(aux)\n        print(\"Pronóstico para los próximos\", i, \"valores:\", aux)\n        i+= 1\n    # Agregar los resultados de la simulación actual al DataFrame\n    simulaciones_df[f'Simulacion_{sim+1}'] = prediccion\n    del model\n    raw_seq = Datos_historicos\n    n_steps = 144\n    X, y = split_sequence(raw_seq, n_steps)\n    n_features = 1\n    X = X.reshape((X.shape[0],X.shape[1], n_features))\n\n    model = Sequential()\n    model.add(Conv1D(64, kernel_size=5, activation='relu', \n    input_shape=(n_steps, n_features)))\n    model.add(MaxPooling1D(pool_size=5))\n    model.add(Flatten())\n    model.add(Dense(50, activation='relu'))\n    model.add(Dense(1))\n    model.compile(optimizer=RMSprop(clipvalue=1.0), loss='mae')\n    # Entrenamiento del modelo\n    model.fit(X, y, epochs=100, verbose=1)\n    x_input = y[(144*28):(144*29)]\n    n = len(x_input)\n    n_steps = 144\n    n_features = 1\n    x_input =  x_input.reshape((1, n_steps, n_features))\n    # Predicción con el modelo entrenado\n    yhat = model.predict(x_input, verbose=0).reshape(-1, 1)\n\n# Mostrar el DataFrame con los resultados de todas las simulaciones\nprint(simulaciones_df)\n```\n:::\n\n## Comparación de resultados\n\n::: {style=\"text-align: justify\"}\nDe manera similar, la implementación de los modelos LSTM y CNN sigue la misma metodología para las cuatro variables restantes, abarcando desde la estandarización de los datos hasta el pronóstico de los días seleccionados.\n:::\n\n::: {.content-visible when-format=\"pdf\" style=\"text-align: justify\"}\n\\newpage\n:::\n\n## Resultados Finales del Estudio de Caso\n\n::: {style=\"text-align: justify\"}\nLos pronósticos obtenidos de la red neuronal LSTM y la red neuronal CNN, fueron guardados en hojas de cálculo para facilitar su posterior análisis. La visualización de la similitud y la tendencia de los pronósticos con los datos históricos, se hará mediante gráficas y tablas. Las gráficas fueron realizados con Plotly, versión para R, una librería para la visualización de datos en gráficos interactivos.\n:::\n\n::: {style=\"text-align: justify\"}\nPara analizar el pronóstico, se utilizan datos históricos correspondientes a los periodos de 180 días (6 meses), 90 días (3 meses), 30 días (un mes) y 15 días. Es importante destacar que, para cada entrenamiento, se calibraron los parámetros del modelo LSTM y del modelo CNN de manera específica, teniendo en cuenta la longitud de los datos históricos utilizados.\n:::\n\n::: {style=\"text-align: justify\"}\nEl estudio del comportamiento de los próximos 7 días posteriores a los 180 días (6 meses) de datos históricos, requirió la configuración de la [red neuronal convolucional](estudio.qmd#sec-implementación-de-la-red-neuronal-cnn), con 5 capas ocultas, se eligió la función de activación [ReLu](redes.qmd#sec-Relu) y el entrenamiento se ejecuta a 25 épocas para obtener 100 simulaciones. Por otro lado, con los mismos datos anteriores, se reconfiguró la [red neuronal LSTM](#sec-implementación-de-la-red-neuronal-lstm), con 3 capas ocultas tipo LSTM, se eligió el optimizador [Adam](redes.qmd#sec-Adam) con un tamaño de lote (batch size) de 314 y el entrenamiento se ejecuto a 25 épocas para obtener solo 10 simulaciones debido al largo tiempo de ejecución y que no se dispone de grandes recursos computacionales.\n\nPara el pronóstico de 4 días, se utilizaron 90 días (3 meses) de datos históricos, que en el caso de la configuración de la [red neuronal convolucional](estudio.qmd#sec-implementación-de-la-red-neuronal-cnn), tiene 5 capas ocultas, se eligió la función de activación [ReLu](redes.qmd#sec-Relu) y fueron ejecutadas 70 épocas para obtener 50 simulaciones. En cambio, para el caso de la [red neuronal LSTM](estudio.qmd#sec-implementación-de-la-red-neuronal-lstm) se utilizaron 3 capas ocultas tipo LSTM se eligió el optimizador [Adam](redes.qmd#sec-Adam) con un tamaño de lote (batch size) de 314 y el entrenamiento se ejecutó a 70 épocas para obtener las mismas 50 simulaciones.\n\nDe manera similar, para ver el comportamiento de los próximos 4 días posteriores a los 30 días de datos históricos, se configuró la [red neuronal convolucional](estudio.qmd#sec-implementación-de-la-red-neuronal-cnn) con 5 capas ocultas, se eligió la función de activación [ReLu](redes.qmd#sec-Relu) y el entrenamiento se ejecutó 100 épocas con el fin de obtener 100 simulaciones. Por otro lado, la configuración de la [red neuronal LSTM](estudio.qmd#sec-implementación-de-la-red-neuronal-lstm) utiliza 3 capas ocultas tipo LSTM, se eligió el optimizador [Adam](redes.qmd#sec-Adam) con un tamaño de lote (batch size) de 157 y el entrenamiento se realizó durante 100 épocas para generar las mismas 100 simulaciones.\n\nPara pronosticar los próximos 2 días, se tomaron 15 días de datos históricos. La configuración de la [red neuronal convolucional](estudio.qmd#sec-implementación-de-la-red-neuronal-cnn) tiene 5 capas ocultas, se eligió la función de activación [ReLu](redes.qmd#sec-Relu) y su entrenamiento se ejecutó por 40 épocas para obtener como en el caso anterior 100 simulaciones. Por otro lado, la [red neuronal LSTM](estudio.qmd#sec-implementación-de-la-red-neuronal-lstm) tiene 3 capas ocultas tipo LSTM, se eligió el optimizador [Adam](redes.qmd#sec-Adam) con un tamaño de lote (batch size) de 157 y el entrenamiento se ejecutó a 100 épocas con el fin de obtener las mismas 100 simulaciones.\n\nDado que el comportamiento de cada variable en su serie de tiempo es diferente, fué necesario hacer ajustes específicos en los parámetros para que la arquitectura de los modelos implementados fuera adecuada para realizar el pronóstico. Se tomó un número apropiado de épocas para que el valor en la función de pérdida fuera lo suficientemente pequeño, evitando así el [sobreentrenamiento del modelo](redes.qmd#sec-sobreentrenamiento) y asegurando la precisión en los pronósticos. Manteniendo al mismo tiempo las propiedades cíclicas de los datos históricos.\n:::\n\n::: {.content-visible when-format=\"html\" style=\"text-align: justify\"}\nTodo lo anterior se resume en las siguientes gráficas @fig-Temperatura , @fig-pmbar , @fig-rh, @fig-rho, @fig-wv.\n:::\n\n::: {.content-visible when-format=\"pdf\" style=\"text-align: justify\"}\nTodo lo anterior se resume en las siguientes gráficas @fig-Temperaturapdf , @fig-pmbarpdf , @fig-rhpdf, @fig-rhopdf, @fig-wvpdf.\n:::\n\n:::: {.content-visible when-format=\"html\"}\n::: {#fig-Temperatura}\n```{r echo=FALSE, message=FALSE, warning=FALSE}\n#                                   Temperatura\nsimulaciones_6meses_convolucional_7dias <- read_excel(\"simulaciones_6meses_convolucional_7dias_Temperatura.xlsx\")\nsimulaciones_6meses_convolucional_7dias <- subset(simulaciones_6meses_convolucional_7dias, select = -c(Simulacion_7 ))\nmediana_6meses_convolucional_Tem <- apply(simulaciones_6meses_convolucional_7dias, 1, median)\nsimulaciones_6meses_LSTM_7dias <- read_excel(\"10simulaciones_6meses_lstm_Temperatura_7dias.xlsx\")\nmediana_6meses_LSTM_Tem <- apply(simulaciones_6meses_LSTM_7dias, 1, median)\nTemp <- datos_clima$`T (degC)`[(7*144):(194*144)]\nTemp <-Temp +273.15\nDatos_historicos6 <- Temp \n\n\n\n\nsimulaciones_3meses_Conv_Tem <- read_excel(\"simulaciones_3mes_convolucional_Temp_4dias.xlsx\")\nsimulaciones_3meses_Conv_Tem <- subset(simulaciones_3meses_Conv_Tem, select = -c(Simulacion_7,Simulacion_10,Simulacion_13,Simulacion_24,Simulacion_25,Simulacion_29,Simulacion_30,Simulacion_35,Simulacion_36,Simulacion_44,Simulacion_49 ))\nmediana_3meses_Conv_Tem <- apply(simulaciones_3meses_Conv_Tem, 1, median)\nsimulaciones_3meses_lstm_4dias <- read_excel(\"simulaciones_3meses_lstm_4dias_Temp.xlsx\")\nmediana_3meses_LSTM_Tem <- apply(simulaciones_3meses_lstm_4dias, 1, median)\n\n\n\nsimulaciones_1mes_convolucional_Tem_4dias <- read_excel(\"simulaciones_1mes_convolucional_Tem_4dias.xlsx\")\nsimulaciones_1mes_convolucional_Tem_4dias <- subset(simulaciones_1mes_convolucional_Tem_4dias, select = -c(Simulacion_5,Simulacion_9,Simulacion_12,Simulacion_17,Simulacion_23,Simulacion_28,Simulacion_32,Simulacion_35,Simulacion_43,Simulacion_44,Simulacion_55,Simulacion_59,Simulacion_62,Simulacion_67,Simulacion_73,Simulacion_78,Simulacion_82,Simulacion_85,Simulacion_93,Simulacion_94))\nmediana_Tem_1mes_CNN <- apply(simulaciones_1mes_convolucional_Tem_4dias, 1, median)\nsimulaciones_1mes_lstm_Tem <- read_excel(\"simulaciones_1mes_lstm_Tem.xlsx\")\nmediana_Tem_1mes_LSTM <- apply(simulaciones_1mes_lstm_Tem, 1, median)\n\n\n\nsimulaciones_15dias_lstm <- read_excel(\"simulaciones_15dias_lstm_Temp.xlsx\")\nmediana_15dias_lstm_Tem <- apply(simulaciones_15dias_lstm, 1, median)\nsimulaciones_15dias_conv <- read_excel(\"simulaciones_15dias_convolucional_2dias_Tem.xlsx\")\nsimulaciones_15dias_conv <- subset(simulaciones_15dias_conv, select = -c(Simulacion_88,Simulacion_88))\nmediana_15dias_conv <- apply(simulaciones_15dias_conv, 1, median)\n\n#View(simulaciones_1mes_convolucional_Tem_4dias)\n\n\nDate <- datos_clima$`Date Time`[(7*144):(194*144)]\ndate1 <- datos_clima$`Date Time`[(187*144):(194*144-1)]\ndate2 <- datos_clima$`Date Time`[(97*144):(101*144-1)]\ndate3 <- datos_clima$`Date Time`[(37*144):(41*144-1)]\ndate4 <- datos_clima$`Date Time`[(22*144):(24*144-1)]\n\n\nfig1<- grafico(Datos_historicos6,Date,date1,simulaciones_6meses_convolucional_7dias,mediana_6meses_convolucional_Tem,simulaciones_6meses_LSTM_7dias,mediana_6meses_LSTM_Tem  )\n\nfig2 <-grafico(Datos_historicos6,Date,date2,simulaciones_3meses_Conv_Tem,mediana_3meses_Conv_Tem,simulaciones_3meses_lstm_4dias,mediana_3meses_LSTM_Tem)\n\n\nfig3 <-grafico(Datos_historicos6,Date,date3,simulaciones_1mes_convolucional_Tem_4dias,mediana_Tem_1mes_CNN,simulaciones_1mes_lstm_Tem,mediana_Tem_1mes_LSTM)\n\nfig4 <-grafico2(Datos_historicos6,Date,date4,simulaciones_15dias_conv,mediana_15dias_conv,simulaciones_15dias_lstm,mediana_15dias_lstm_Tem)\n\n\n# \n# \nfig <- subplot(fig1, fig2,fig3,fig4 ,nrows = 2, margin = 0.04) %>%\n  layout(showlegend = TRUE,annotations = annotations)\nfig\n\n\n```\n\nPredicción de 7 días, 4 días y 2 días de la Temperatura (° F) utilizando la red neuronal convolucional y la red neuronal LSTM\n:::\n::::\n\n::: {.content-visible when-format=\"html\" style=\"text-align: justify\"}\nLos resultados en la Figura @fig-Temperatura de Temperatura (° F) indican que la mediana de los pronósticos a 7 días, 4 días y 2 días utilizando la red neuronal LSTM presenta una aproximación más precisa a los datos históricos que la pronosticada por la red neuronal convolucional.\n\n<!-- Y también para los 4 días correspondientes a 08 de Abril del 2009 al 12 de Abril al 2009. -->\n\n<!-- 08 de febrero del 2009 al 11 de Febrero del 2009. -->\n\n<!-- 23 de Enero de 2009 al 25 de Junio de 2009. -->\n:::\n\n:::: {.content-visible when-format=\"html\"}\n::: {#fig-pmbar}\n```{r echo=FALSE, message=FALSE, warning=FALSE}\nlibrary(readxl)\n#                                (pmbar)\np_aire6       <-df_clima$p..mbar.[(7*144):(194*144)]\nsimulaciones_6meses_convolucional_pmbar <- read_excel(\"simulaciones_6mes_convolucional_pmbar_7dias.xlsx\")\nmediana_6meses_convolucional_pmbar <- apply(simulaciones_6meses_convolucional_pmbar, 1, median)\nsimulaciones_6meses_LSTM_pmbar <- read_excel(\"10simulaciones_6meses_lstm_pmbar_7dias.xlsx\")\nmediana_6meses_LSTM_pmbar <- apply(simulaciones_6meses_LSTM_pmbar, 1, median)\n\nsimulaciones_3meses_convolucional_pmbar_4dias <- read_excel(\"simulaciones_3meses_convolucional_pmbar_4dias.xlsx\")\nsimulaciones_3meses_convolucional_pmbar_4dias <- subset(simulaciones_3meses_convolucional_pmbar_4dias, select = -c(Simulacion_21,Simulacion_39))\nmediana_3meses_convolucional_pmbar <- apply(simulaciones_3meses_convolucional_pmbar_4dias, 1, median)\nsimulaciones_3meses_LSTM_pmbar <- read_excel(\"50simulaciones_3meses_lstm_pmbar_4dias.xlsx\")\nmediana_3meses_LSTM_pmbar <- apply(simulaciones_3meses_LSTM_pmbar, 1, median)\n\nsimulaciones_1mes_lstm_mbar <- read_excel(\"simulaciones_1mes_lstm_mbar.xlsx\")\nmediana_1mes_mbar_LSTM <- apply(simulaciones_1mes_lstm_mbar, 1, median)\nsimulaciones_1mes_conv_mbar <- read_excel(\"simulaciones_1mes_convolucional_mbar_4dias.xlsx\")\nmediana_1mes_mbar_conv <- apply(simulaciones_1mes_conv_mbar, 1, median)\n\nsimulaciones_15dias_lstm_pmbar_2dias<- read_excel(\"simulaciones_15dias_lstm_pmbar_2dias.xlsx\")\nmediana_15dias_pmbar_LSTM <- apply(simulaciones_15dias_lstm_pmbar_2dias, 1, median)\nsimulaciones_15dias_convolucional_2dias_pmbar <- read_excel(\"simulaciones_15dias_convolucional_2dias_pmbar.xlsx\")\nmediana_15dias_mbar_conv <- apply(simulaciones_15dias_convolucional_2dias_pmbar, 1, median)\n\n\n\nfig1<- grafico(p_aire6 ,Date,date1,simulaciones_6meses_convolucional_pmbar,mediana_6meses_convolucional_pmbar,simulaciones_6meses_LSTM_pmbar,mediana_6meses_LSTM_pmbar )\n\nfig2 <-grafico(p_aire6,Date,date2,simulaciones_3meses_convolucional_pmbar_4dias,mediana_3meses_convolucional_pmbar,simulaciones_3meses_LSTM_pmbar,mediana_3meses_LSTM_pmbar )\n\nfig3 <-grafico(p_aire6,Date,date3,simulaciones_1mes_conv_mbar,mediana_1mes_mbar_conv,simulaciones_1mes_lstm_mbar,mediana_1mes_mbar_LSTM )\n\nfig4 <-grafico2(p_aire6,Date,date4,simulaciones_15dias_convolucional_2dias_pmbar,mediana_15dias_mbar_conv,simulaciones_15dias_lstm_pmbar_2dias,mediana_15dias_pmbar_LSTM )\n\n\n# fig <- subplot(fig1, fig2,fig3,fig4 ,nrows = 2, margin = 0.05) %>%\n#   layout(showlegend = TRUE, margin = list(b = 20),annotations = annotations)\n# fig\n\nfig <- subplot(fig1, fig2,fig3,fig4 ,nrows = 2, margin = 0.04) %>%\n  layout(showlegend = TRUE,annotations = annotations)\nfig\n\n\n```\n\nPredicción de 7 días, 4 días y 2 días de la presión del aire p(mbar) utilizando la red neuronal convolucional y la red neuronal LSTM.\n:::\n::::\n\n:::: {.content-visible when-format=\"html\"}\n::: {#fig-rho}\n```{r echo=FALSE, message=FALSE, warning=FALSE}\n#                        (  rho  )\nd_aire6         <-df_clima$rho..g.m..3.[(7*144):(194*144)]\nsimulaciones_6meses_convolucional_7dias <- read_excel(\"simulaciones_6meses_convolucional_7dias_rho.xlsx\")\nmediana_6meses_convolucional_rho <- apply(simulaciones_6meses_convolucional_7dias, 1, median)\nsimulaciones_6meses_LSTM <- read_excel(\"10simulaciones_6meses_lstm_rho_7dias.xlsx\")\nmediana_6meses_LSTM_rho <- apply(simulaciones_6meses_LSTM, 1, median)\n\n\n\n\nsimulaciones_3meses_convolucional_rho_4dias <- read_excel(\"simulaciones_3meses_convolucional_rho_4dias.xlsx\")\nsimulaciones_3meses_convolucional_rho_4dias <- subset(simulaciones_3meses_convolucional_rho_4dias, select = -c(Simulacion_9,Simulacion_14,Simulacion_15,Simulacion_16,Simulacion_18,Simulacion_19,Simulacion_21,Simulacion_27,Simulacion_28,Simulacion_29,Simulacion_30,Simulacion_32,Simulacion_35,Simulacion_38,Simulacion_39,Simulacion_43,Simulacion_46,Simulacion_47,Simulacion_48,Simulacion_49 ))\nmediana_3meses_convolucional_rho <- apply(simulaciones_3meses_convolucional_rho_4dias, 1, median)\nsimulaciones_3meses_lstm_rho_4dias <- read_excel(\"50simulaciones_3meses_lstm_rho_4dias.xlsx\")\nmediana_3meses_LSTM_rho <- apply(simulaciones_3meses_lstm_rho_4dias, 1, median)\n\n\n\n\n\nsimulaciones_1mes_lstm_rho <- read_excel(\"simulaciones_1mes_lstm_rho.xlsx\")\nmediana_1mes_rho_LSTM <- apply(simulaciones_1mes_lstm_rho, 1, median)\nsimulaciones_1mes_convolucional_rho <- read_excel(\"simulaciones_1mes_convolucional_rho_4dias .xlsx\")\nsimulaciones_1mes_convolucional_rho <- subset(simulaciones_1mes_convolucional_rho, select = -c(Simulacion_2,Simulacion_3,Simulacion_4,Simulacion_10,Simulacion_14,Simulacion_15,Simulacion_18,Simulacion_22,Simulacion_24,Simulacion_26,Simulacion_27,Simulacion_28,Simulacion_30,Simulacion_31,Simulacion_32,Simulacion_34,Simulacion_35,Simulacion_36,Simulacion_37,Simulacion_40,Simulacion_44,Simulacion_46,Simulacion_47,Simulacion_50,Simulacion_66))\nmediana_1mes_rho_conv <- apply(simulaciones_1mes_convolucional_rho, 1, median)\n\n\nsimulaciones_15dias_lstm_rho_2dias   <- read_excel(\"simulaciones_15dias_lstm_rho_2dias.xlsx\")\nmediana_15dias_rho_LSTM <- apply(simulaciones_15dias_lstm_rho_2dias, 1, median)\nsimulaciones_15dias_convolucional_rho_2dias <- read_excel(\"simulaciones_15dias_convolucional_rho_2dias.xlsx\")\nsimulaciones_15dias_convolucional_rho_2dias <- subset(simulaciones_15dias_convolucional_rho_2dias, select = -c(Simulacion_6,Simulacion_7,Simulacion_9,Simulacion_10,Simulacion_12,Simulacion_16,Simulacion_23,Simulacion_25,Simulacion_28,Simulacion_32,Simulacion_33,Simulacion_34,Simulacion_38,Simulacion_41,Simulacion_43,Simulacion_47,Simulacion_48,Simulacion_49,Simulacion_50,Simulacion_62,Simulacion_63,Simulacion_65,Simulacion_66,Simulacion_69,Simulacion_74,Simulacion_80,Simulacion_81,Simulacion_83,Simulacion_85,Simulacion_86,Simulacion_92,Simulacion_93,Simulacion_95,Simulacion_96,Simulacion_98))\nmediana_15dias_rho_conv <- apply(simulaciones_15dias_convolucional_rho_2dias, 1, median)\n\n\n\nfig1<- grafico(d_aire6,Date,date1,simulaciones_6meses_convolucional_7dias,mediana_6meses_convolucional_rho,simulaciones_6meses_LSTM,mediana_6meses_LSTM_rho )\nfig2 <-grafico(d_aire6,Date,date2,simulaciones_3meses_convolucional_rho_4dias,mediana_3meses_convolucional_rho,simulaciones_3meses_lstm_rho_4dias ,mediana_3meses_LSTM_rho )\n\nfig3 <-grafico(d_aire6,Date,date3,simulaciones_1mes_convolucional_rho,mediana_1mes_rho_conv,simulaciones_1mes_lstm_rho,mediana_1mes_rho_LSTM )\n\nfig4 <-grafico2(d_aire6,Date,date4,simulaciones_15dias_convolucional_rho_2dias ,mediana_15dias_rho_conv,simulaciones_15dias_lstm_rho_2dias,mediana_15dias_rho_LSTM )\n\n\n\n# \n# fig <- subplot(fig1, fig2,fig3,fig4 ,nrows = 4, margin = 0.05) %>%\n#   layout(showlegend = TRUE, margin = list(b = 20),annotations = annotations)\n# fig\n\nfig <- subplot(fig1, fig2,fig3,fig4 ,nrows = 2, margin = 0.04) %>%\n  layout(showlegend = TRUE,annotations = annotations)\nfig\n\n```\n\nPredicción de 7 días, 4 días y 2 días de la densidad del aire utilizando la red neuronal convolucional y la red neuronal LSTM.\n:::\n::::\n\n:::: {.content-visible when-format=\"html\"}\n::: {#fig-rh}\n```{r echo=FALSE, message=FALSE, warning=FALSE}\n#                        (  rh )\nh_relativa6   <-df_clima$rh....[(7*144):(194*144)] #humedad relativa\nsimulaciones_6meses_convolucional_7dias <- read_excel(\"simulaciones_6mes_convolucional_rh_7dias.xlsx\")\nmediana_6meses_convolucional_rh <- apply(simulaciones_6meses_convolucional_7dias, 1, median)\nsimulaciones_6meses_LSTM_rh <- read_excel(\"10simulaciones_6meses_lstm_rh_7dias.xlsx\")\nmediana_6meses_LSTM_rh <- apply(simulaciones_6meses_LSTM_rh, 1, median)\n\nsimulaciones_3meses_convolucional_rh_4dias <- read_excel(\"simulaciones_3meses_convolucional_rh_4dias.xlsx\")\nsimulaciones_3meses_convolucional_rh_4dias <- subset(simulaciones_3meses_convolucional_rh_4dias, select = -c(Simulacion_13))\nmediana_3meses_convolucional_rh <- apply(simulaciones_3meses_convolucional_rh_4dias, 1, median)\nsimulaciones_3meses_lstm_rh_4dias <- read_excel(\"50simulaciones_3meses_lstm_rh_4dias.xlsx\")\nmediana_3meses_LSTM_rh <- apply(simulaciones_3meses_lstm_rh_4dias, 1, median)\n\nsimulaciones_1mes_lstm_rh <- read_excel(\"simulaciones_1mes_lstm_rh.xlsx\")\nmediana_1mes_rh_LSTM <- apply(simulaciones_1mes_lstm_rh, 1, median)\nsimulaciones_1mes_conv_rh <- read_excel(\"simulaciones_1mes_convolucional_rh_4dias.xlsx\")\nmediana_1mes_rh_conv <- apply(simulaciones_1mes_conv_rh, 1, median)\n\n\n\nsimulaciones_15dias_lstm_rh_2dias <- read_excel(\"simulaciones_15dias_lstm_rh_2dias.xlsx\")\nmediana_15dias_rh_LSTM <- apply(simulaciones_15dias_lstm_rh_2dias, 1, median)\nsimulaciones_15dias_convolucional_rh_2dias <- read_excel(\"simulaciones_15dias_convolucional_rh_2dias.xlsx\")\nmediana_15dias_rh_conv <- apply(simulaciones_15dias_convolucional_rh_2dias, 1, median)\n\nfig1<- grafico(h_relativa6 ,Date,date1, simulaciones_6meses_convolucional_7dias ,mediana_6meses_convolucional_rh ,simulaciones_6meses_LSTM_rh,mediana_6meses_LSTM_rh  )\n\nfig2<- grafico(h_relativa6 ,Date,date2, simulaciones_3meses_convolucional_rh_4dias ,mediana_3meses_convolucional_rh ,simulaciones_3meses_lstm_rh_4dias,mediana_3meses_LSTM_rh  )\n\nfig3 <- grafico(h_relativa6,Date,date3,simulaciones_1mes_conv_rh,mediana_1mes_rh_conv ,simulaciones_1mes_lstm_rh,mediana_1mes_rh_LSTM )\n\nfig4 <- grafico2(h_relativa6,Date,date4,simulaciones_15dias_convolucional_rh_2dias,mediana_15dias_rh_conv,simulaciones_15dias_lstm_rh_2dias,mediana_15dias_rh_LSTM)\n\n# fig <- subplot(fig1, fig2,fig3,fig4 ,nrows = 4, margin = 0.05) %>%\n#   layout(showlegend = TRUE, margin = list(b = 20),annotations = annotations)\n# fig\n\nfig <- subplot(fig1, fig2,fig3,fig4 ,nrows = 2, margin = 0.04) %>%\n  layout(showlegend = TRUE,annotations = annotations)\nfig\n\n\n```\n\nPredicción de 7 días, 4 días y 2 días de la humedad relativa utilizando la red neuronal convolucional y la red neuronal LSTM\n:::\n::::\n\n:::: {.content-visible when-format=\"html\"}\n::: {#fig-wv}\n```{r echo=FALSE, message=FALSE, warning=FALSE}\n#               (wv)\nv_viento6      <-df_clima$wv..m.s.[(7*144):(194*144)]\nsimulaciones_6meses_convolucional_7dias <- read_excel(\"simulaciones_6meses_convolucional_7dias_wv.xlsx\")\nmediana_6meses_convolucional_wv <- apply(simulaciones_6meses_convolucional_7dias, 1, median)\n\nsimulaciones_6meses_LSTM_wv <- read_excel(\"10simulaciones_6meses_lstm_wv_7dias.xlsx\")\nmediana_6meses_LSTM_wv <- apply(simulaciones_6meses_LSTM_wv, 1, median)\n\nsimulaciones_3mes_Conv_wv <- read_excel(\"simulaciones_3mes_convolucional_wv_4dias.xlsx\")\nsimulaciones_3mes_Conv_wv <- subset(simulaciones_3mes_Conv_wv, select = -c(Simulacion_2,Simulacion_34,Simulacion_10 ))\nmediana_3meses_Conv_wv <- apply(simulaciones_3mes_Conv_wv, 1, median)\nsimulaciones_3mes_LSTM_wv <- read_excel(\"50simulaciones_3meses_lstm_wv_4dias.xlsx\")\nmediana_3meses_LSTM_wv <- apply(simulaciones_3mes_LSTM_wv, 1, median)\n\nsimulaciones_1mes_conv_wv <- read_excel(\"simulaciones_1mes_convolucional_wv_4dias.xlsx\")\nsimulaciones_1mes_conv_wv <- subset(simulaciones_1mes_conv_wv, select = -c(Simulacion_25 ))\nmediana_1mes_wv_conv <- apply(simulaciones_1mes_conv_wv, 1, median)\nsimulaciones_1mes_lstm_wv <- read_excel(\"simulaciones_1mes_lstm_wv.xlsx\")\nmediana_1mes_wv_LSTM <- apply(simulaciones_1mes_lstm_wv, 1, median)\n\nsimulaciones_15dias_convolucional_wv_2dias <- read_excel(\"simulaciones_15dias_convolucional_wv_2dias.xlsx\")\nmediana_15dias_wv_conv <- apply(simulaciones_15dias_convolucional_wv_2dias, 1, median)\nsimulaciones_15dias_lstm_wv_2dias <- read_excel(\"simulaciones_15dias_lstm_wv_2dias.xlsx\")\nmediana_15dias_wv_LSTM <- apply(simulaciones_15dias_lstm_wv_2dias, 1, median)\n\nfig1 <- grafico(v_viento6,Date,date1,simulaciones_6meses_convolucional_7dias,mediana_6meses_convolucional_wv,simulaciones_6meses_LSTM_wv,mediana_6meses_LSTM_wv)\n\nfig2 <- grafico(v_viento6,Date,date2,simulaciones_3mes_Conv_wv,mediana_3meses_Conv_wv,simulaciones_3mes_LSTM_wv,mediana_3meses_LSTM_wv )\n\n\nfig3 <- grafico(v_viento6,Date,date3, simulaciones_1mes_conv_wv, mediana_1mes_wv_conv, simulaciones_1mes_lstm_wv,mediana_1mes_wv_LSTM )\n\nfig4 <- grafico2(v_viento6,Date,date4,simulaciones_15dias_convolucional_wv_2dias,mediana_15dias_wv_conv,simulaciones_15dias_lstm_wv_2dias,mediana_15dias_wv_LSTM)\n\n\n# \n# fig <- subplot(fig1, fig2,fig3,fig4 ,nrows = 4, margin = 0.05) %>%\n#   layout(showlegend = TRUE, margin = list(b = 20),annotations = annotations)\n# fig\nfig <- subplot(fig1, fig2,fig3,fig4 ,nrows = 2, margin = 0.04) %>%\n  layout(showlegend = TRUE,annotations = annotations)\nfig\n\n```\n\nPredicción de 7 días, 4 días y 2 días de la velocidad del viento utilizando la red neuronal convolucional y la red neuronal LSTM\n:::\n::::\n\n::: {.content-visible when-format=\"pdf\"}\n![Predicción de 7 días, 4 días y 2 días de la Temperatura (° F) utilizando la red neuronal convolucional y la red neuronal LSTM](Temperatura2.png){#fig-Temperaturapdf width=\"515\"}\n:::\n\n::: {.content-visible when-format=\"pdf\" style=\"text-align: justify\"}\nLos resultados en la Figura de Temperatura (@fig-Temperaturapdf) indican que la [mediana](Estadistica.qmd#sec-Mediana) de los pronósticos a 7 días, 4 días y 2 días utilizando la red neuronal LSTM presenta una aproximación más precisa a los datos históricos que la pronosticada por la red neuronal convolucional.\n:::\n\n::: {.content-visible when-format=\"pdf\"}\n![Predicción de 7 días, 4 días y 2 días de la presión del aire utilizando la red neuronal convolucional y la red neuronal LSTM.](PMBAR.png){#fig-pmbarpdf}\n:::\n\n::: {.content-visible when-format=\"pdf\"}\n![Predicción de 7 días, 4 días y 2 días de la densidad del aire utilizando la red neuronal convolucional y la red neuronal LSTM.](RHO.png){#fig-rhopdf}\n:::\n\n::: {.content-visible when-format=\"pdf\"}\n![Predicción de 7 días, 4 días y 2 días de la humedad relativa utilizando la red neuronal convolucional y la red neuronal LSTM](RH.png){#fig-rhpdf}\n:::\n\n::: {.content-visible when-format=\"pdf\"}\n![Predicción de 7 días, 4 días y 2 días de la velocidad del viento utilizando la red neuronal convolucional y la red neuronal LSTM](WV.png){#fig-wvpdf}\n:::\n\n::: {.content-visible when-format=\"pdf\" style=\"text-align: justify\"}\n\\newpage\n:::\n\n#### RMSE\n\n::: {style=\"text-align: justify\"}\nLuego de obtener los valores pronosticados por las redes propuestas, se tomó la [mediana](Estadistica.qmd#sec-Mediana) de los pronósticos y se procedió a contrastarlos con el error cuadrático medio ([RMSE](series.qmd#sec-RMSE)). Esto permitió determinar el menor valor del error y así identificar diferencias de usa los modelos de redes. Los resultados obtenidos se muestran en @tbl-RMSE.\n:::\n\n|  |  |  |  |  |\n|:-------------:|:-------------:|:-------------:|:-------------:|:-------------:|\n|  |  | **RMSE** |  |  |\n| **Datos históricos** | **180 días** | **90 días** | **30 días** | **15 días** |\n| **Numero de días pronosticados** | 7 días | 4 días | 4 días | 2 días |\n| **Temperatura (CNN)** | 7.748363 | 12.544 | 4.729259 | 5.89646 |\n| **Temperatura (LSTM)** | 3.035672 | 7.350131 | 3.267742 | 4.281648 |\n| **Velocidad del viento (CNN)** | 1.805565 | 1.525929 | 2.68279 | 3.638407 |\n| **Velocidad del viento (LSTM)** | 1.415952 | 1.366431 | 2.711044 | 2.846553 |\n| **Densidad del aire (CNN)** | 43.71869 | 24.26363 | 26.00116 | 69.96927 |\n| **Densidad del aire (LSTM)** | 14.33086 | 43.15156 | 22.59924 | 38.28266 |\n| **Humedad relativa (CNN)** | 23.77749 | 34.24427 | 21.69839 | 10.64634 |\n| **Humedad relativa (LSTM)** | 10.83128 | 12.39585 | 13.42141 | 14.1402 |\n| **Presión del aire (CNN)** | 9.351951 | 19.09469 | 17.30254 | 17.22759 |\n| **Presión del aire (LSTM)** | 3.638899 | 3.289955 | 9.254557 | 22.74026 |\n\n: RMSE de la mediana de los pronósticos para 5 variables. {#tbl-RMSE}\n\n::: {style=\"text-align: justify\"}\nA través de la @tbl-RMSE, se observa inicialmente de que para estos datos meteorológicos, la red neuronal LSTM exhibe un error considerablemente menor en comparación con la red neuronal convolucional. Esto resulta en un pronóstico mas cercano a los valores reales, por lo tanto, se recomienda utilizar la red neuronal LSTM para llevar a cabo futuras predicciones.\n\nEn la @tbl-RMSE se observa que la red neuronal LSTM proporciona una mejor aproximación para la variable velocidad del viento, ya que el error cuadrático medio ([RMSE](series.qmd#sec-RMSE)) es significativamente menor en todos los pronóstico realizados en comparación con la red neuronal convolucional. Además, el mismo análisis en la @tbl-RMSE revela que, a medida que aumentan los datos históricos de la velocidad del viento, el RMSE tiende a disminuir.\n\nPor otro lado, se observa en @tbl-RMSE que el pronóstico para la densidad del aire no es tan preciso, ya que presenta el ([RMSE](series.qmd#sec-RMSE)) más alto en comparación con las demás variables. En ambos modelos, tanto la red neuronal LSTM como la red neuronal convolucional, no logran una buena predicción en los días pronosticados, comparado con la gráfica del valor real. Esta diferencia en la precisión del pronóstico podría deberse a varios factores. Uno de los factores potenciales es una posible falla en los sensores de densidad del aire. Los sensores podrían estar proporcionando datos inconsistentes, lo que afectaría la capacidad de los modelos para aprender patrones precisos y hacer predicciones confiables. Además, es posible que haya fluctuaciones no detectadas en las condiciones ambientales o interferencias externas que impacten la precisión de los sensores.\n:::\n","srcMarkdownNoYaml":"\n\n# Estudio de caso\n\n```{r echo=FALSE, message=FALSE, warning=FALSE}\n#setwd(\"C:/Users/chaca/Documents/Tesis/Quarto_archivos/Tesis/Tesis_escrita\" )\nlibrary(scales)\nlibrary(later)\nlibrary(tidyverse)\nlibrary(scales)\nlibrary(stats)\nlibrary(ggplot2)\nlibrary(graphics)\nlibrary(plotly)\n\n#library(webshot)\n#library(htmlwidgets)\nlibrary(purrr)\nlibrary(rlang)\nlibrary(promises)\nlibrary(readxl)\nlibrary(readr)\n\nlibrary(tseries)\nlibrary(tswge)\n\nlibrary(datasets)\nlibrary(tswge)\n\n\ndatos_clima <- read_csv(\"C:/Users/chaca/Documents/Tesis/Quarto_archivos/Tesis/Tesis_escrita/datos_clima_wsu.csv\", \n                        col_types = cols(`Date Time` = col_datetime(format = \"%d.%m.%Y %H:%M:%S\")))\n\n\ndf_clima <- data.frame(datos_clima)\n```\n\n```{r echo=FALSE, message=FALSE, warning=FALSE}\n#                Funciones graficas \ngrafico <- function(Datos_historicos,date1,date2, simulaciones_convolucional,mediana_convolucional,simulaciones_LSTM,mediana_LSTM) {\n  \n  \n  #indice_final <- length(Datos_historicos) - 7*144\n  #indice_ultimo_dato <- seq(indice_final, indice_final + length(mediana_convolucional) -1)\n  minimos_convolucional <- apply(simulaciones_convolucional, 1, min)\n  maximos_convolucional <- apply(simulaciones_convolucional, 1, max)\n  \n  \n  minimos_LSTM <- apply(simulaciones_LSTM, 1, min)\n  maximos_LSTM <- apply(simulaciones_LSTM, 1, max)\n  \n  fig1 <- plot_ly() %>%\n    add_trace(x = ~date1, y = ~Datos_historicos, type = \"scatter\", mode = \"lines\", name = \"Datos historicos\", line = list(color = \"#0F0F0F\"),showlegend = FALSE) %>%\n    layout(title = \"  \",xaxis  = list(title = \" \",tickfont = list(size = 10)),yaxis = list(title = \"Temperatura (°F)\"),showlegend = FALSE) %>%\n    add_trace(x = ~date2, y = ~mediana_LSTM, type = 'scatter', mode = 'lines', name = 'Mediana del pronóstico (LSTM)', line = list(color = 'blue'),showlegend = FALSE) %>%  \n    add_ribbons(x = ~date2, ymin = minimos_LSTM, ymax = maximos_LSTM, fillcolor = '#FFB5C5', opacity = 0.5,name = \"Pronósticos (LSTM)\", line = list(color = 'rgba(0,0,0,0)'),showlegend = FALSE) %>%\n    add_trace(x = ~date2 , y = ~mediana_convolucional, type = 'scatter', mode = 'lines', name = 'Mediana del pronóstico (CNN)', line = list(color = 'red'),showlegend = FALSE) %>%  \n    add_ribbons(x = ~date2, ymin = minimos_convolucional, ymax = maximos_convolucional, fillcolor = '#97FFFF', opacity = 0.4,name = \"Pronósticos (CNN)\", line = list(color = 'rgba(0,0,0,0)'),showlegend = FALSE) \n  # %>% \n  #   layout(legend = list(\n  #     orientation = \"h\",  # Horizontal\n  #     x = 0.5,            # Centro horizontal\n  #     xanchor = \"center\", # Anclar al centro\n  #     y = -0.2            # Por encima del gráfico\n  #   ),showlegend = FALSE)\n  # \n  return(fig1)\n}\n\n\n\ngrafico_2 <- function(Datos_historicos,date1,date2, simulaciones_convolucional,mediana_convolucional,simulaciones_LSTM,mediana_LSTM) {\n  \n  \n  #indice_final <- length(Datos_historicos3) - 4*144\n  #indice_ultimo_dato <- seq(indice_final, indice_final + length(mediana_convolucional) -1)\n  minimos_convolucional <- apply(simulaciones_convolucional, 1, min)\n  maximos_convolucional <- apply(simulaciones_convolucional, 1, max)\n  \n  minimos_LSTM <- apply(simulaciones_LSTM, 1, min)\n  maximos_LSTM <- apply(simulaciones_LSTM, 1, max)\n  \n fig1 <- plot_ly() %>%\n    add_trace(x = ~date1, y = ~Datos_historicos, type = \"scatter\", mode = \"lines\", name = \"Datos historicos\", line = list(color = \"#0F0F0F\")) %>%\n    layout(title = \"  \",xaxis  = list(title = \" \",tickfont = list(size = 10)),yaxis = list(title = \"Temperatura (°F)\")) %>%\n    add_trace(x = ~date2, y = ~mediana_LSTM, type = 'scatter', mode = 'lines', name = 'Mediana del pronóstico (LSTM)', line = list(color = 'blue')) %>%  \n    add_ribbons(x = ~date2, ymin = minimos_LSTM, ymax = maximos_LSTM, fillcolor = '#97FFFF', opacity = 0.4,name = \"Pronósticos (LSTM)\", line = list(color = 'rgba(0,0,0,0)')) %>%\n    add_trace(x = ~date2 , y = ~mediana_convolucional, type = 'scatter', mode = 'lines', name = 'Mediana del pronóstico (CNN)', line = list(color = 'red')) %>%  \n    add_ribbons(x = ~date2, ymin = minimos_convolucional, ymax = maximos_convolucional, fillcolor = '#97FFFF', opacity = 0.4,name = \"Pronósticos (CNN)\", line = list(color = 'rgba(0,0,0,0)'))%>% \n    layout(legend = list(\n      orientation = \"h\",  # Horizontal\n      x = 0.5,            # Centro horizontal\n      xanchor = \"center\", # Anclar al centro\n      y = -0.2            # Por encima del gráfico\n    ))\n  \n  return(fig1)\n}\n\n\n\ngrafico2 <- function(Datos_historicos,date1,date2, simulaciones_convolucional,mediana_convolucional,simulaciones_LSTM,mediana_LSTM) {\n  \n  \n  #indice_final <- length(Datos_historicos3) - 4*144\n  #indice_ultimo_dato <- seq(indice_final, indice_final + length(mediana_convolucional) -1)\n  minimos_convolucional <- apply(simulaciones_convolucional, 1, min)\n  maximos_convolucional <- apply(simulaciones_convolucional, 1, max)\n  \n  minimos_LSTM <- apply(simulaciones_LSTM, 1, min)\n  maximos_LSTM <- apply(simulaciones_LSTM, 1, max)\n  \n  fig1 <- plot_ly() %>%\n    add_trace(x = ~date1, y = ~Datos_historicos, type = \"scatter\", mode = \"lines\", name = \"Datos historicos\", line = list(color = \"black\")) %>%\n    layout(title = \"  \",\n           xaxis  = list(title = \" \",tickfont = list(size = 10)),\n           yaxis = list(title = \"Temperatura (°F)\")) %>%\n    add_trace(x = ~date2, y = ~mediana_LSTM, type = 'scatter', mode = 'lines', name = 'Mediana del pronóstico (LSTM)', line = list(color = 'blue')) %>%  \n    add_ribbons(x = ~date2, ymin = minimos_LSTM, ymax = maximos_LSTM, fillcolor = '#FFB5C5', opacity = 0.5,name = \"Pronósticos (LSTM)\", line = list(color = 'rgba(0,0,0,0)')) %>%\n    add_trace(x = ~date2 , y = ~mediana_convolucional, type = 'scatter', mode = 'lines', name = 'Mediana del pronóstico (CNN)', line = list(color = 'red')) %>%  \n    add_ribbons(x = ~date2, ymin = minimos_convolucional, ymax = maximos_convolucional, fillcolor = '#97FFFF', opacity = 0.4,name = \"Pronósticos (CNN)\", line = list(color = 'rgba(0,0,0,0)'))%>% \n    layout(legend = list(\n      orientation = \"h\",  # Horizontal\n      x = 0.5,            # Centro horizontal\n      xanchor = \"center\", # Anclar al centro\n      y = -0.03            # Por encima del gráfico\n    ))\n  \n  return(fig1)\n}\n\n\n\nannotations = list( \n  list( \n    x = -0.05,  \n    y = 1.0,  \n    text = \"180 días\",  \n    xref = \"paper\",  \n    yref = \"paper\",  \n    xanchor = \"center\",  \n    yanchor = \"bottom\",  \n    showarrow = FALSE,\n    font = list(\n      size = 12,        # Tamaño del texto\n      color = \"black\",  # Color del texto\n      family = \"Arial\", # Familia de la fuente\n      bold = TRUE       # Negrita\n    )\n  ),  \n  list( \n    x = 0.52,  \n    y = 1.0,  \n    text = \" 90 días\",  \n    xref = \"paper\",  \n    yref = \"paper\",  \n    xanchor = \"center\",  \n    yanchor = \"bottom\",  \n    showarrow = FALSE,\n    font = list(\n      size = 12,        # Tamaño del texto\n      color = \"black\",  # Color del texto\n      family = \"Arial\", # Familia de la fuente\n      bold = TRUE       # Negrita\n    )\n  ),  \n  list( \n    x = -0.05,  \n    y = 0.45,  \n    text = \"30 días\",  \n    xref = \"paper\",  \n    yref = \"paper\",  \n    xanchor = \"center\",  \n    yanchor = \"bottom\",  \n    showarrow = FALSE,\n    font = list(\n      size = 12,        # Tamaño del texto\n      color = \"black\",  # Color del texto\n      family = \"Arial\", # Familia de la fuente\n      bold = TRUE       # Negrita\n    )\n  ),\n  list( \n    x = 0.52,  \n    y = 0.45,  \n    text = \"15 días\",  \n    xref = \"paper\",  \n    yref = \"paper\",  \n    xanchor = \"center\",  \n    yanchor = \"bottom\",  \n    showarrow = FALSE,\n    font = list(\n      size = 12,        # Tamaño del texto\n      color = \"black\",  # Color del texto\n      family = \"Arial\", # Familia de la fuente\n      bold = TRUE       # Negrita\n    )\n  ))\n```\n\n```{r echo=FALSE, message=FALSE, warning=FALSE}\n#setwd(\"C:/Users/chaca/Documents/Tesis/Quarto_archivos/Tesis/Tesis_escrita\" )\n\n\n```\n\n## Descripción del problema\n\nLa modelación de las variables climaticas permite el entendimiento y la generación del pronóstico climático de una región para la planificación territorial, agricultura, ecología, análisis y la conservación de los recursos naturales.\n\nEn el presente estudio, se utilizó un conjunto de datos climáticos que fueron consultados del 01 de Enero del 2009 al 01 de Enero del 2012. Con la finalidad de comprobar la utilidad y eficacia de dos modelos adecuados de redes neuronales: LTSM y la red neuronal convolucional (CNN). Para el pronóstico de datos climáticos modelados como series de tiempo.\n\n### Origen de los datos\n\n::: {style=\"text-align: justify\"}\nSe emplea un conjunto de datos con información climática que fue grabada con el objetivo de ser analizada en la estación climática en el Instituto de Biogeoquimica Max Planck en Jena, Alemania. El mismo contiene todas las variables medidas con su correspondiente instrumento (tal como temperatura del aire, presión atmosférica, humedad, dirección del viento, etc) grabadas cada 10 minutos, a lo largo de varios años. El cual está disponible para su descarga en <https://www.bgc-jena.mpg.de/wetter/weather_data.html> .\n\nDe los 14 datos diferentes, se seleccionan 5 teniendo en cuenta factores como su rango y sus patrones estacionales.\n\nLas variables seleccionadas son las siguientes:\n\n-   $p( mbar )$ - Presión del aire.\n\n-   $T( ° C )$ - Temperatura del aire.\n\n-   $rh( \\% )$ - Humedad relativa.\n\n-   $rho(g/m^3$) - Densidad del aire\n\n-   $wv(m/s)$ - Velocidad del viento.\n\n<!-- Se presentan las 5 variables en su serie temporal. -->\n:::\n\n## Limpieza y procesamiento de datos\n\n::: {style=\"text-align: justify\"}\nLos datos recopilados fueron sometidos a un proceso exhaustivo de limpieza y preprocesamiento. <!-- Para conformar la base de datos que se utilizo,  --> En este paso se detectó el intervalo de tiempo en el que mejor se comportarán los datos históricos, por ello se asignó un conjunto de datos históricos omitiendo los primeros 7 días, así como la estandarización y normalización de las 5 variables mas relevantes. Esto con el objetivo de obtener un mejor pronóstico de los datos a futuro.\n:::\n\n## Pronóstico mediante red neuronales\n\n### Modelamiento y pronóstico mediante redes neuronales para series de tiempo unidimensionales\n\n::: {style=\"text-align: justify\"}\nSe presentan las gráficas de los datos históricos de las 5 variables elegidas.\n:::\n\n:::: {.content-visible when-format=\"html\"}\n::: {#fig-Temperatura_ts}\n```{r echo=TRUE, message=FALSE, warning=FALSE}\n\nTemp<-df_clima$T..degC.\nTemp <-Temp +273.15\nDatos_historicos <- Temp \nX<- df_clima$Date.Time\nfig <- plot_ly() %>%\n  add_trace(x = ~X, y = ~Datos_historicos, type = \"scatter\", mode = \"lines\", name = \"Temperatura\", line = list(color = '#63B8FF')) %>%\n  layout(title = \" \",\n         xaxis = list(title = \" \"),\n         yaxis = list(title = \"Temperatura (°F)\")) \nfig\n\n```\n\nSerie de tiempo de la Temperatura (° F) del 01 de Enero del 2009 al 01 de Enero del 2012.\n:::\n::::\n\n:::: {.content-visible when-format=\"html\"}\n::: {#fig-paire_ts}\n```{r echo=TRUE, message=FALSE, warning=FALSE}\n\np_aire <-df_clima$p..mbar. #presion del aire\nX<- df_clima$Date.Time\nfig <- plot_ly() %>%\n  add_trace(x = ~X, y = ~p_aire, type = \"scatter\", mode = \"lines\", name = \"presión aire\", line = list(color = '#63B8FF')) %>%\n  layout(title = \" \",\n         xaxis = list(title = \" \"),\n         yaxis = list(title = \"mbar\")) \nfig\n\n```\n\nSerie de tiempo de la presión del aire p (mbar) del 01 de Enero del 2009 al 01 de Enero del 2012.\n:::\n::::\n\n:::: {.content-visible when-format=\"html\"}\n::: {#fig-hrelativa_ts}\n```{r echo=TRUE, message=FALSE, warning=FALSE}\nh_relativa<-df_clima$rh.... #humedad relativa\nX<- df_clima$Date.Time\nfig <- plot_ly() %>%\n  add_trace(x = ~X, y = ~h_relativa, type = \"scatter\", mode = \"lines\", name = \"Humedad relativa\", line = list(color = '#63B8FF')) %>%\n  layout(title = \" \",\n         xaxis = list(title = \" \"),\n         yaxis = list(title = \"Porcentaje\")) \nfig\n\n```\n\nSerie de tiempo de la humedad relativa rh (%) del 01 de Enero del 2009 al 01 de Enero del 2012.\n:::\n::::\n\n:::: {.content-visible when-format=\"html\"}\n::: {#fig-daire_ts}\n```{r echo=TRUE, message=FALSE, warning=FALSE}\nd_aire<-df_clima$rho..g.m..3. # Densidad del aire \nX<- df_clima$Date.Time\nfig <- plot_ly() %>%\n  add_trace(x = ~X, y = ~d_aire, type = \"scatter\", mode = \"lines\", name = \"Humedad relativa\", line = list(color = '#63B8FF')) %>%\n  layout(title = \" \",\n         xaxis = list(title = \" \"),\n         yaxis = list(title = \"g /m³\")) \nfig\n\n```\n\nSerie de tiempo de la densidad del aire rho ($g /m^3$) del 01 de Enero del 2009 al 01 de Enero del 2012.\n:::\n::::\n\n:::: {.content-visible when-format=\"html\"}\n::: {#fig-viento_ts}\n```{r echo=TRUE, message=FALSE, warning=FALSE}\nv_viento <-df_clima$wv..m.s. # Velocidad del viento\nX<- df_clima$Date.Time\nfig <- plot_ly() %>%\n  add_trace(x = ~X, y = ~v_viento, type = \"scatter\", mode = \"lines\", name = \"Humedad relativa\", line = list(color = '#63B8FF')) %>%\n  layout(title = \" \",\n         xaxis = list(title = \" \"),\n         yaxis = list(title = \"g/m\")) \nfig\n\n```\n\nSerie de tiempo de la velocidad del viento wv ($m/s$) del 01 de Enero del 2009 al 01 de Enero del 2012.\n:::\n::::\n\n::: {.content-visible when-format=\"pdf\"}\n```{r, echo=FALSE}\n#| label: fig-Temperatura_tspdf\n#| fig-cap: \"Serie de tiempo de la Temperatura(° F) del 01 de Enero del 2009 al 01 de Enero del 2012.\"\n \nfig <- ggplot(data = df_clima, aes(x = X, y = Datos_historicos)) +\n  geom_line(color = '#63B8FF') +\n  labs(title = \"\", x = \"\", y = \"Temperatura (° F)\") +\n  theme_minimal()\nplot(fig)\n```\n:::\n\n::: {.content-visible when-format=\"pdf\"}\n```{r, echo=FALSE}\n#| label: fig-paire_tspdf\n#| fig-cap: \"Serie de tiempo de la presión del aire p(mbar) del 01 de Enero del 2009 al 01 de Enero del 2012.\"\n \nfig <- ggplot(data = df_clima, aes(x = X, y = p_aire)) +\n  geom_line(color = '#63B8FF') +\n  labs(title = \"\", x = \"\", y = \"mbar\") +\n  theme_minimal()\nplot(fig)\n```\n:::\n\n::: {.content-visible when-format=\"pdf\"}\n```{r, echo=FALSE}\n#| label: fig-hrelativa_tspdf\n#| fig-cap: \"Serie de tiempo de la humedad relativa rh (%) del 01 de Enero del 2009 al 01 de Enero del 2012.\"\n \nfig <- ggplot(data = df_clima, aes(x = X, y = h_relativa)) +\n  geom_line(color = '#63B8FF') +\n  labs(title = \"\", x = \"\", y = \"porcentaje\") +\n  theme_minimal()\nplot(fig)\n```\n:::\n\n::: {.content-visible when-format=\"pdf\"}\n```{r, echo=FALSE}\n#| label: fig-daire_tspdf\n#| fig-cap: \"Serie de tiempo de la densidad del aire rho($g /m^3$) del 01 de Enero del 2009 al 01 de Enero del 2012.\"\n \nfig <- ggplot(data = df_clima, aes(x = X, y = d_aire)) +\n  geom_line(color = '#63B8FF') +\n  labs(title = \"\", x = \"\", y = \"g/ m³\") +\n  theme_minimal()\nplot(fig)\n```\n:::\n\n::: {.content-visible when-format=\"pdf\"}\n```{r, echo=FALSE}\n#| label: fig-viento_tspdf\n#| fig-cap: \"Serie de tiempo de la velocidad del viento wv($m/ s$) del 01 de Enero del 2009 al 01 de Enero del 2012.\"\n \nfig <- ggplot(data = df_clima, aes(x = X, y = v_viento)) +\n  geom_line(color = '#63B8FF') +\n  labs(title = \"\", x = \"\", y = \"m/ s\") +\n  theme_minimal()\nplot(fig)\n```\n:::\n\n::: {.content-visible when-format=\"pdf\" style=\"text-align: justify\"}\n\\newpage\n:::\n\n#### Estacionalidad\n\n::: {style=\"text-align: justify\"}\nCon el propósito de llevar a cabo una inspección visual y analítica de los datos y al mismo tiempo una descripción preliminar, se busca identificar los patrones de estacionalidad anual y diaria. Esto se puede apreciar claramente en los gráficos de [autocorrelación](series.qmd#sec-autocorrelación). Para calcular la autocorrelación en R se utiliza la función acf(). Esta función proporciona estimaciones gráficamente de la autocorrelación que se puede representar el conjunto de datos históricos de la Temperatura (° F).\n:::\n\n::: {.content-visible when-format=\"pdf\" style=\"text-align: justify\"}\nEl código que genera la autocorrelación es el siguiente :\n:::\n\n::: {#fig-Temp200}\n```{r,echo=TRUE, message=FALSE, warning=FALSE}\nacf(df_clima$T..degC., lag.max = 200, \n    main = \"Autocorrelación de Temperatura\")\n\n```\n\nAutocorrelación de los primeros 200 datos correspondiente a la Temperatura (° F) en su serie temporal.\n:::\n\n::: {style=\"text-align: justify\"}\nEn @fig-Temp200 se observa que la autocorrelación los primeros 200 datos correspondiente a la Temperatura (° F) vistas como serie temporal. Teniendo en cuenta que el intervalo temporal entre observaciones es de 10 minutos, el patrón cíclico que se observa cada 144 observaciones corresponde al transcurso de 24 horas.\n:::\n\n::: {#fig-Temp1000}\n```{r,echo=TRUE, message=FALSE, warning=FALSE}\nacf(df_clima$T..degC., lag.max = 1000, \n    main = \"Autocorrelación de Temperatura\")\n\n```\n\nAutocorrelación de los primeros 1000 datos correspondiente a la Temperatura (° F) en su serie temporal.\n:::\n\n::: {style=\"text-align: justify\"}\nEn @fig-Temp200 se observa que la autocorrelación los primeros 1000 datos correspondiente a la Temperatura (° F) en su serie temporal.\n:::\n\n::: {#fig-Temp100000}\n```{r,echo=TRUE, message=FALSE, warning=FALSE}\nacf(df_clima$T..degC., lag.max = 100000, \n    main = \"Autocorrelación de Temperatura\")\n\n```\n\nAutocorrelación de los primeros 100000 datos correspondiente a la Temperatura (° F) en su serie temporal.\n:::\n\n::: {style=\"text-align: justify\"}\nEn la @fig-Temp100000 podemos deducir que los datos históricos siguen un patrón cíclico que se observa es aproximadamente cada 52000 observaciones, es decir, corresponde al transcurso de un año.\n:::\n\n#### Prueba KPSS (Kwiatkowski-Phillips-Schmidt-Shin)\n\n::: {style=\"text-align: justify\"}\nA continuación, se emplea la prueba de Kwiatkowski-Phillips-Schmidt-Shin ([KPSS](series.qmd#sec-KPSS)) para examinar la presencia de estacionariedad en la serie temporal. Este test fué utilizado con la finalidad de identificar la existencia de [raices unitarias](series.qmd#sec-raices-unitarias) en la serie, lo cual permite inferir la presencia o ausencia de [estacionariedad](series.qmd#sec-series-estacionales) en los datos analizados.\n:::\n\nLa hipótesis nula y la alternativa para la prueba KPSS son:\n\n$$H_0:  El \\ modelo \\ es \\ estacionario\n\\ \\ \\qquad H_1: El \\  modelo \\  no \\ es \\  estacionario$$\n\n```{r,echo=TRUE, message=FALSE, warning=FALSE}\n#library(tseries)\nTemperatura_ts <-datos_clima$`T (degC)`[1:105120] #Temperatura\nkpss.test(Temperatura_ts, null = \"Trend\")\n```\n\n::: {style=\"text-align: justify\"}\nLa hipótesis nula $H_0$ no asume la presencia de raíces unitarias, lo que indica no estacionariedad en la serie, al obtener un KPSS estadístico superior que el nivel de significancia establecido el cual es de $5 \\%$ ($0.05$), se rechaza la hipótesis nula, sugiriendo la ausencia de estacionariedad en la serie de tiempo de Temperatura (° F). Por lo que vamos a utilizar técnicas para obtener la estacionariedad de la serie de tiempo.\n\nLuego, para hacer estacionarios los datos se aplicaron las siguientes transformaciones:\n:::\n\n#### Diferenciación\n\n::: {style=\"text-align: justify\"}\nSe aplicó las diferencias a los datos de Temperatura (° F) para buscar la estacionalidad de la serie de Tiempo.\n:::\n\n::: {#fig-Temp_diferencias}\n```{r,echo=TRUE, message=FALSE, warning=FALSE}\n#library(tswge)\nd_Temperatura = artrans.wge(Temperatura_ts,phi.tr= 1)\n```\n\nDiferencias de los datos de Temperatura (° F) en su serie temporal.\n:::\n\n::: {style=\"text-align: justify\"}\nEn la @fig-Temp_diferencias se observa que después de aplicar diferencias a los datos de Temperatura (° F) observamos que la serie presenta estacionalidad.\n:::\n\n<!-- y de la prueba Kpss en la cual no se rechaza (la serie es estacionaria). -->\n\n```{r,echo=TRUE, message=FALSE, warning=FALSE}\n#library(tseries)\n#d2_Temperatura = artrans.wge(d_Temperatura,phi.tr= 1)\nkpss.test(d_Temperatura, null = \"Trend\")\n```\n\n::: {style=\"text-align: justify\"}\nAl aplicar la prueba KPSS a las diferencias a los datos de Temperatura (°F) en su serie de tiempo, se obtiene un kpss estadístico menor devuelto por el test, no se rechaza la hipótesis nula, confirmando la estacionariedad en la serie de tiempo de la Temperatura (°F).\n:::\n\n#### Estandarización\n\n::: {style=\"text-align: justify\"}\nPara que los datos sean comparables, es necesario estandarizarlos. Se ajustan los datos históricos en su serie de tiempo para que su media sea 0 y su desviación estándar sea 1.\n:::\n\n```{r echo=FALSE, message=FALSE, warning=FALSE, attr.output='style=\"max-height: 300px;\"'}\nE_temperatura <- scale(d_Temperatura)\nE_temperatura[1:100]\n```\n\n#### Normalización\n\n::: {style=\"text-align: justify\"}\nEsta transformación modifica la escala de los datos a un nuevo rango entre 0 y 1.\n:::\n\n```{r echo=FALSE, message=FALSE, warning=FALSE, attr.output='style=\"max-height: 300px;\"'}\nnormalizar <- function(vector) {\n  min_value <- 0\n  max_value <- 1\n  min_vector <- min(vector)\n  max_vector <- max(vector)\n  vector_normalizado <- (vector - min_vector) / (max_vector - min_vector) * (max_value - min_value) + min_value\n  return(vector_normalizado)\n}\n\nnormalizar(E_temperatura[1:100])\n```\n\n::: {style=\"text-align: justify\"}\nLuego del ajuste preliminar de los datos históricos en su serie de tiempo, se realizó una separación de los datos en dos grupos. Uno para entrenamiento y otro para testeo.\n:::\n\n## Implementación de la red neuronal LSTM {#sec-implementación-de-la-red-neuronal-lstm}\n\n::: {style=\"text-align: justify\"}\nEn esta parte, se realizó el siguiente ajuste para su implementación en lenguaje Python dentro del alterno [Colaboratory](Estadistica.qmd#sec-colab) de los servicios gratuitos de google.\n:::\n\n### Pronóstico mediante técnica rodante\n\nDe las los 144 datos por día. En cada paso, se actualiza la secuencia de entrada eliminando el valor más antiguo y agregando el último pronóstico como el valor más reciente. Esto se ilustra esquemáticamente en la @fig-rodante, donde $n$ es la longitud rodante de la secuencia de entrada y $T$ es la longitud de la serie Temporal.\n\n::: {#fig-rodante}\n$$\n\\begin{split}\ny:\\text{Observado}\\quad &\\quad \\hat{y}:\\text{Pronosticado}\\\\\ny_{T-n+1}\\quad y_{T-n+2}\\quad y_{T-n+3}\\quad&\\cdots\\quad y_{T-2}\\quad y_{T-1}\\quad y_T\\quad \\to\\quad \\color{orange}{\\hat{y}_{T+1}}\\\\\ny_{T-n+2}\\quad y_{T-n+3}\\quad y_{T-n+4}\\quad&\\cdots\\quad y_{T-1}\\quad y_{T}\\quad \\color{orange}{\\hat{y}_{T+1}}\\quad \\to\\quad \\color{orange}{\\hat{y}_{T+2}}\\\\\ny_{T-n+3}\\quad y_{T-n+4}\\quad y_{T-n+5}\\quad&\\cdots\\quad y_{T}\\quad \\color{orange}{\\hat{y}_{T+1}}\\quad \\color{orange}{\\hat{y}_{T+2}}\\quad \\to\\quad \\color{orange}{\\hat{y}_{T+3}}\\\\\ny_{T-n+4}\\quad y_{T-n+5}\\quad y_{T-n+6} \\quad & \\cdots\\quad\\color{orange}{\\hat{y}_{T+1}}\\quad\\color{orange}{\\hat{y}_{T+2}}\\quad\\color{orange}{\\hat{y}_{T+3}}  \\to\\quad \\color{orange}{\\hat{y}_{T+4}}\\\\\n&\\ddots \\\\\n\\end{split}\n$$\n:::\n\n### Entrenamiento y calibración del modelo LSTM\n\n::: {style=\"text-align: justify\"}\nSe procede al entrenamiento del modelo LSTM. La cantidad de capas ocultas son 3. La primera capa LSTM, es una capas LSTM con 50 unidades (neuronas). La segunda capa LSTM posee las mismas propiedades que la capa anterior. Y la tercera capa, es una una capa densa de salida. El tamaño del lote (batch size) es de 157, indica el número de muestras que se usarán para actualizar los pesos del modelo en cada paso de entrenamiento. Esta configuración se llevó a cabo con una función de activación [Adam](redes.qmd#sec-Adam), ejecutando 100 iteraciones para el entrenamiento de la red neuronal. La función de pérdida utilizada es el error cuadrático medio ([MSE](series.qmd#sec-MSE)).\n\nA continuación se exhibe el código utilizado.\n:::\n\n```{python,echo=TRUE, message=FALSE, warning=FALSE, eval = FALSE }\n# univariate cnn example\nimport numpy as np\nimport pandas as pd\nimport tensorflow as tf\nfrom tensorflow.keras.layers import Dense, LSTM\nfrom tensorflow.keras.models import Sequential\nfrom sklearn.preprocessing import MinMaxScaler\npd.options.mode.chained_assignment = None\ntf.random.set_seed(0)\n\n\n\nfrom google.colab import drive\ndrive.mount('/content/drive')\n\n# Leer set de datos\nruta = '/content/drive/My Drive/Colab Notebooks/'\ndf = pd.read_csv(ruta+'datos_clima_wsu.csv')\nTimes = df['Date Time'] # Date\nTemperatura = df['T(C°)'] #Valiable\n#Tamaño de los Datos históricos\nTemperatura = Temperatura[(7*144):(22*144)] \nTemperatura = Temperatura + 273.15 \ny = pd.DataFrame({'Times': Times, 'Temperatura': Temperatura})\n# Convertir la columna 'fecha' al formato datetime de pandas\ny['Times'] = pd.to_datetime(y['Times'], format='%d.%m.%Y %H:%M:%S')\n\n# Establecer la columna 'fecha' como el índice de la serie de tiempo\ny.set_index('Times', inplace=True)\ny = y['Temperatura'].fillna(method='ffill')\ny = y.values.reshape(-1, 1)\n# Escalamos los datos\nscaler = MinMaxScaler(feature_range=(0, 1))\nscaler = scaler.fit(y)\ny = scaler.transform(y)\n```\n\n::: {.content-visible when-format=\"pdf\" style=\"text-align: justify\"}\n``` python\n# CNN para datos univariados \nimport numpy as np\nimport pandas as pd\nimport tensorflow as tf\nfrom tensorflow.keras.layers import Dense, LSTM\nfrom tensorflow.keras.models import Sequential\nfrom sklearn.preprocessing import MinMaxScaler\npd.options.mode.chained_assignment = None\ntf.random.set_seed(0)\n\nimport matplotlib.pyplot as plt\n\n# Grafica el Loss\ndef train_and_plot_loss(model, X, y, epochs=100, verbose=2):\n    history = model.fit(X, Y, epochs=100, \n    batch_size=314, verbose=2, shuffle=False)\n\n\n    # Graficar el loss\n    plt.plot(history.history['loss'])\n    plt.title('Model Loss')\n    plt.xlabel('Epoch')\n    plt.ylabel('Loss')\n    plt.show()\n\nfrom google.colab import drive\ndrive.mount('/content/drive')\n\n# Leer set de datos\nruta = '/content/drive/My Drive/Colab Notebooks/'\ndf = pd.read_csv(ruta+'datos_clima_wsu.csv')\nTimes = df['Date Time'] # Date\nTemperatura = df['T(C°)'] #Valiable\n#Tamaño de los Datos historicos\nTemperatura = Temperatura[(7*144):(22*144)] \nTemperatura = Temperatura + 273.15 \ny = pd.DataFrame({'Times': Times, 'Temperatura': Temperatura})\n# Convertir la columna 'fecha' al formato datetime de pandas\ny['Times'] = pd.to_datetime(y['Times'], format='%d.%m.%Y %H:%M:%S')\n\n# Establecer la columna 'fecha' como el índice de la serie de tiempo\ny.set_index('Times', inplace=True)\ny = y['Temperatura'].fillna(method='ffill')\ny = y.values.reshape(-1, 1)\n# Escalamiento de  los datos\nscaler = MinMaxScaler(feature_range=(0, 1))\nscaler = scaler.fit(y)\ny = scaler.transform(y)\n\n# generar las secuencias de entrada y salida\nn_lookback = 6*144  #Secuancia de entrada\n# Secuancia de salida (o Número de predicciones)\nn_forecast = 144*4 \n\n# Inicializar DataFrame para almacenar los resultados\nresultados_df = pd.DataFrame()\nk = 50\n# Genera (k) simulaciones de la predicción\nfor repeticion in range(k):\n    X = []\n    Y = []\n\n    for i in range(n_lookback, len(y) - n_forecast + 1):\n        X.append(y[i - n_lookback: i])\n        Y.append(y[i: i + n_forecast])\n\n    X = np.array(X)\n    Y = np.array(Y)\n\n    # Crea el modelo\n    model = Sequential()\n    model.add(LSTM(units=50, return_sequences=True,\n              input_shape=(n_lookback, 1)))\n    model.add(LSTM(units=50))\n    model.add(Dense(n_forecast))\n    model.compile(loss='mean_squared_error', optimizer='adam')\n    #Entrenamiento del modelo\n    train_and_plot_loss(model, X, y, epochs=100, verbose=2)\n    \n\n    # Genera los pronósticos\n    X_ = y[-n_lookback:]\n    X_ = X_.reshape(1, n_lookback, 1)\n\n    Y_ = model.predict(X_).reshape(-1, 1)\n    Y_ = scaler.inverse_transform(Y_)\n\n    # Agregar resultados al DataFrame\n    resultados_df[f'Repeticion_{repeticion + 1}'] = Y_.flatten()\n\n# Mostrar el DataFrame con los resultados\nprint(resultados_df)\n```\n:::\n\n![Gráfica de la función de pérdida para la red neuronal LSTM](LOSS_LSTM.png){#fig-loss_LSTM}\n\n::: {style=\"text-align: justify\"}\nEn la @fig-loss_LSTM se observa la trayectoria del valor de la [función de pérdida](redes.qmd#sec-función-de-perdida) en cada época del entrenamiento en la red neuronal LSTM.\n:::\n\n## Implementación de la red neuronal convolucional (CNN) {#sec-implementación-de-la-red-neuronal-cnn.}\n\n::: {style=\"text-align: justify\"}\nEn esta parte, se realizó el mismo ajuste que en la red neuronal LSTM para su implementación en Python dentro de un servidor gratuito de [Colaboratory](Estadistica.qmd#sec-colab).\n\nSe procede al entrenamiento de la red neuronal convolucional (CNN). <!-- En esta parte se dividió en varios casos.  --> La cantidad de capas ocultas son 5 capas, de las cuales, la primera capa es una capa es convolucional unidimensional, donde va aprender a través de 64 mapas de características y con un tamaño de [kernel](redes.qmd#sec-kernel) de dimensión 5. La segunda capa es una Capa [Max-pooling](redes.qmd#sec-pooling) unidimensional, la tercera capa es una capa de aplanar ([flatten](redes.qmd#sec-fratten)), la cuarta capa es una capa Densa, la quinta capa es Densa (salida). Asimismo, se eligió la función de activación [ReLu](redes.qmd#sec-Relu), y el proceso de entrenamiento del modelo se ejecutó a lo largo de 25 iteraciones, 70 iteraciones y 100 iteraciones según los datos históricos.\n\nA continuación se exhibe el código utilizado.\n:::\n\n```{python,echo=TRUE, message=FALSE, warning=FALSE, eval = FALSE }\n# univariate cnn example\nfrom numpy import array\nfrom keras.models import Sequential\nfrom keras.layers import Dense\nfrom keras.layers import Flatten\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Conv1D, MaxPooling1D, Flatten, Dense\nfrom tensorflow.keras.optimizers import RMSprop\nimport matplotlib.pyplot as plt\nfrom keras import backend as K\n\nimport numpy as np\nimport pandas as pd\nimport yfinance as yf\nimport tensorflow as tf\nfrom tensorflow.keras.layers import Dense, LSTM\nfrom tensorflow.keras.models import Sequential\nfrom sklearn.preprocessing import MinMaxScaler \n\n\n# split a univariate sequence into samples\ndef split_sequence(sequence, n_steps):\n    X, y = list(), list()\n    for i in range(len(sequence)):\n        # find the end of this pattern\n        end_ix = i + n_steps\n        # check if we are beyond the sequence\n        if end_ix > len(sequence)-1:\n            break\n        # gather input and output parts of the pattern\n        seq_x, seq_y = sequence[i:end_ix], sequence[end_ix]\n        X.append(seq_x)\n        y.append(seq_y)\n    return array(X), array(y)\n\n\ndef train_and_plot_loss(model, X, y, epochs=20, verbose=1):\n    history = model.fit(X, y, epochs=epochs, verbose=verbose)\n    # Graficar el loss\n    plt.plot(history.history['loss'])\n    plt.title('Model Loss')\n    plt.xlabel('Epoch')\n    plt.ylabel('Loss')\n    plt.show()\n\n    \n    \nfrom google.colab import drive\ndrive.mount('/content/drive')\n\n\n# Leer set de datos\nruta = '/content/drive/My Drive/Colab Notebooks/'\ndf = pd.read_csv(ruta+'datos_clima_wsu.csv')\n\nTemperatura = df['T(C°)'] #Valiable\n#Tamaño de los Datos historicos\nTemperatura = Temperatura[(7*144):(37*144)] \nTemperatura = Temperatura + 273.15 \n\n# Escalar los datos entre 0 y 1\nscaler = MinMaxScaler(feature_range=(0, 1))\nDatos_historicos = scaler.fit_transform(Temperatura.values.reshape(-1, 1))\n\n\n```\n\n::: {.content-visible when-format=\"pdf\" style=\"text-align: justify\"}\n``` python\n# univariate cnn example\nfrom numpy import array\nfrom keras.models import Sequential\nfrom keras.layers import Dense\nfrom keras.layers import Flatten\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Conv1D, MaxPooling1D, Flatten, Dense\nfrom tensorflow.keras.optimizers import RMSprop\nimport matplotlib.pyplot as plt\nfrom keras import backend as K\n\nimport numpy as np\nimport pandas as pd\nimport tensorflow as tf\nfrom tensorflow.keras.layers import Dense, LSTM\nfrom tensorflow.keras.models import Sequential\nfrom sklearn.preprocessing import MinMaxScaler    \n\n\n#Divide una secuencia univariada en muestras\ndef split_sequence(sequence, n_steps):\n    X, y = list(), list()\n    for i in range(len(sequence)):\n        # Encuentra el final de este patrón\n        end_ix = i + n_steps\n        #Comprueba si se está más allá de la secuencia\n        if end_ix > len(sequence)-1:\n            break\n        #Reune las partes de entrada y salida del patrón\n        seq_x, seq_y = sequence[i:end_ix], sequence[end_ix]\n        X.append(seq_x)\n        y.append(seq_y)\n    return array(X), array(y)\n\ndef train_and_plot_loss(model, X, y, epochs=20, verbose=1):\n    history = model.fit(X, y, epochs=epochs, verbose=verbose)\n    # Graficar el loss\n    plt.plot(history.history['loss'])\n    plt.title('Model Loss')\n    plt.xlabel('Epoch')\n    plt.ylabel('Loss')\n    plt.show()\n\n    \n#Ubica el Drive del archivo    \nfrom google.colab import drive\ndrive.mount('/content/drive')\n\n\n# Leer set de datos\nruta = '/content/drive/My Drive/Colab Notebooks/'\ndf = pd.read_csv(ruta+'datos_clima_wsu.csv')\nTemperatura = df['T(C°)'] #Valiable\n#Tamaño de los Datos históricos\nTemperatura = Temperatura[(7*144):(37*144)] \nTemperatura = Temperatura + 273.15 \n\n# Se escalan los datos entre 0 y 1\nscaler = MinMaxScaler(feature_range=(0, 1))\nDatos_historicos = scaler.fit_transform(Temperatura.values.reshape(-1, 1))\n```\n\n``` python\n#Define la secuencia de entrada\nraw_seq = Datos_historicos  \n# Cantidad de pasos de tiempo\nn_steps = 144\n# se divide las muestras\nX, y = split_sequence(raw_seq, n_steps)\nn_features = 1\n#[muestras, pasos de tiempo, características]\nX = X.reshape((X.shape[0],X.shape[1], n_features))  \n# Crear un modelo secuencial\nmodel = Sequential()\nmodel.add(Conv1D(64, kernel_size=5, \n  activation='relu',input_shape=(n_steps, n_features)))\nmodel.add(MaxPooling1D(pool_size=5))\nmodel.add(Flatten())\nmodel.add(Dense(50, activation='relu'))\nmodel.add(Dense(1))\nmodel.compile(optimizer=RMSprop(clipvalue=1.0), loss='mae')\n# Entreniento\ntrain_and_plot_loss(model, X, y, epochs=100, verbose=1)\n```\n:::\n\n![Gráfica de la función de pérdida obtenida mediante una CNN con el conjunto de datos históricos de la variable Temperatura (°F).](loss_convolucional.png){#fig-loss_cnn}\n\n::: {style=\"text-align: justify\"}\nEn la @fig-loss_cnn se muestra la variación del valor de la [función de pérdida](redes.qmd#sec-función-de-perdida) a lo largo del entrenamiento de la red neuronal convolucional (CNN).\n:::\n\n::: {.content-visible when-format=\"pdf\" style=\"text-align: justify\"}\n``` python\nnum_simulaciones = 50\nsimulaciones_df = pd.DataFrame()\n\nprediccion = []\n# Preparación de datos de entrada para la predicción\nx_input = y[(144*28):(144*29)]\nn = len(x_input)\nn_steps = 144\nn_features = 1\nx_input =  x_input.reshape((1, n_steps, n_features))\n\n# Predicción con el modelo entrenado\nyhat = model.predict(x_input, verbose=0).reshape(-1,1)\naux= yhat\naux = scaler.inverse_transform(aux)\n\n\nfor sim in range(num_simulaciones):\n    k = 144*4\n    prediccion = []\n    i = 0\n    for _ in range(k):\n        x_new = yhat[-n_steps:]\n        x_input = np.append(x_input, x_new)\n        x_input = x_input[-n_steps:]\n        x_input = x_input.reshape((1, len(x_input), n_features))\n        yhat = model.predict(x_input, verbose=0).reshape(-1,1)\n        aux= yhat\n        aux = scaler.inverse_transform(aux)\n        prediccion.append(aux)\n        print(\"Pronóstico para los próximos\", i, \"valores:\", aux)\n        i+= 1\n    # Agregar los resultados de la simulación actual al DataFrame\n    simulaciones_df[f'Simulacion_{sim+1}'] = prediccion\n    del model\n    raw_seq = Datos_historicos\n    n_steps = 144\n    X, y = split_sequence(raw_seq, n_steps)\n    n_features = 1\n    X = X.reshape((X.shape[0],X.shape[1], n_features))\n\n    model = Sequential()\n    model.add(Conv1D(64, kernel_size=5, activation='relu', \n    input_shape=(n_steps, n_features)))\n    model.add(MaxPooling1D(pool_size=5))\n    model.add(Flatten())\n    model.add(Dense(50, activation='relu'))\n    model.add(Dense(1))\n    model.compile(optimizer=RMSprop(clipvalue=1.0), loss='mae')\n    # Entrenamiento del modelo\n    model.fit(X, y, epochs=100, verbose=1)\n    x_input = y[(144*28):(144*29)]\n    n = len(x_input)\n    n_steps = 144\n    n_features = 1\n    x_input =  x_input.reshape((1, n_steps, n_features))\n    # Predicción con el modelo entrenado\n    yhat = model.predict(x_input, verbose=0).reshape(-1, 1)\n\n# Mostrar el DataFrame con los resultados de todas las simulaciones\nprint(simulaciones_df)\n```\n:::\n\n## Comparación de resultados\n\n::: {style=\"text-align: justify\"}\nDe manera similar, la implementación de los modelos LSTM y CNN sigue la misma metodología para las cuatro variables restantes, abarcando desde la estandarización de los datos hasta el pronóstico de los días seleccionados.\n:::\n\n::: {.content-visible when-format=\"pdf\" style=\"text-align: justify\"}\n\\newpage\n:::\n\n## Resultados Finales del Estudio de Caso\n\n::: {style=\"text-align: justify\"}\nLos pronósticos obtenidos de la red neuronal LSTM y la red neuronal CNN, fueron guardados en hojas de cálculo para facilitar su posterior análisis. La visualización de la similitud y la tendencia de los pronósticos con los datos históricos, se hará mediante gráficas y tablas. Las gráficas fueron realizados con Plotly, versión para R, una librería para la visualización de datos en gráficos interactivos.\n:::\n\n::: {style=\"text-align: justify\"}\nPara analizar el pronóstico, se utilizan datos históricos correspondientes a los periodos de 180 días (6 meses), 90 días (3 meses), 30 días (un mes) y 15 días. Es importante destacar que, para cada entrenamiento, se calibraron los parámetros del modelo LSTM y del modelo CNN de manera específica, teniendo en cuenta la longitud de los datos históricos utilizados.\n:::\n\n::: {style=\"text-align: justify\"}\nEl estudio del comportamiento de los próximos 7 días posteriores a los 180 días (6 meses) de datos históricos, requirió la configuración de la [red neuronal convolucional](estudio.qmd#sec-implementación-de-la-red-neuronal-cnn), con 5 capas ocultas, se eligió la función de activación [ReLu](redes.qmd#sec-Relu) y el entrenamiento se ejecuta a 25 épocas para obtener 100 simulaciones. Por otro lado, con los mismos datos anteriores, se reconfiguró la [red neuronal LSTM](#sec-implementación-de-la-red-neuronal-lstm), con 3 capas ocultas tipo LSTM, se eligió el optimizador [Adam](redes.qmd#sec-Adam) con un tamaño de lote (batch size) de 314 y el entrenamiento se ejecuto a 25 épocas para obtener solo 10 simulaciones debido al largo tiempo de ejecución y que no se dispone de grandes recursos computacionales.\n\nPara el pronóstico de 4 días, se utilizaron 90 días (3 meses) de datos históricos, que en el caso de la configuración de la [red neuronal convolucional](estudio.qmd#sec-implementación-de-la-red-neuronal-cnn), tiene 5 capas ocultas, se eligió la función de activación [ReLu](redes.qmd#sec-Relu) y fueron ejecutadas 70 épocas para obtener 50 simulaciones. En cambio, para el caso de la [red neuronal LSTM](estudio.qmd#sec-implementación-de-la-red-neuronal-lstm) se utilizaron 3 capas ocultas tipo LSTM se eligió el optimizador [Adam](redes.qmd#sec-Adam) con un tamaño de lote (batch size) de 314 y el entrenamiento se ejecutó a 70 épocas para obtener las mismas 50 simulaciones.\n\nDe manera similar, para ver el comportamiento de los próximos 4 días posteriores a los 30 días de datos históricos, se configuró la [red neuronal convolucional](estudio.qmd#sec-implementación-de-la-red-neuronal-cnn) con 5 capas ocultas, se eligió la función de activación [ReLu](redes.qmd#sec-Relu) y el entrenamiento se ejecutó 100 épocas con el fin de obtener 100 simulaciones. Por otro lado, la configuración de la [red neuronal LSTM](estudio.qmd#sec-implementación-de-la-red-neuronal-lstm) utiliza 3 capas ocultas tipo LSTM, se eligió el optimizador [Adam](redes.qmd#sec-Adam) con un tamaño de lote (batch size) de 157 y el entrenamiento se realizó durante 100 épocas para generar las mismas 100 simulaciones.\n\nPara pronosticar los próximos 2 días, se tomaron 15 días de datos históricos. La configuración de la [red neuronal convolucional](estudio.qmd#sec-implementación-de-la-red-neuronal-cnn) tiene 5 capas ocultas, se eligió la función de activación [ReLu](redes.qmd#sec-Relu) y su entrenamiento se ejecutó por 40 épocas para obtener como en el caso anterior 100 simulaciones. Por otro lado, la [red neuronal LSTM](estudio.qmd#sec-implementación-de-la-red-neuronal-lstm) tiene 3 capas ocultas tipo LSTM, se eligió el optimizador [Adam](redes.qmd#sec-Adam) con un tamaño de lote (batch size) de 157 y el entrenamiento se ejecutó a 100 épocas con el fin de obtener las mismas 100 simulaciones.\n\nDado que el comportamiento de cada variable en su serie de tiempo es diferente, fué necesario hacer ajustes específicos en los parámetros para que la arquitectura de los modelos implementados fuera adecuada para realizar el pronóstico. Se tomó un número apropiado de épocas para que el valor en la función de pérdida fuera lo suficientemente pequeño, evitando así el [sobreentrenamiento del modelo](redes.qmd#sec-sobreentrenamiento) y asegurando la precisión en los pronósticos. Manteniendo al mismo tiempo las propiedades cíclicas de los datos históricos.\n:::\n\n::: {.content-visible when-format=\"html\" style=\"text-align: justify\"}\nTodo lo anterior se resume en las siguientes gráficas @fig-Temperatura , @fig-pmbar , @fig-rh, @fig-rho, @fig-wv.\n:::\n\n::: {.content-visible when-format=\"pdf\" style=\"text-align: justify\"}\nTodo lo anterior se resume en las siguientes gráficas @fig-Temperaturapdf , @fig-pmbarpdf , @fig-rhpdf, @fig-rhopdf, @fig-wvpdf.\n:::\n\n:::: {.content-visible when-format=\"html\"}\n::: {#fig-Temperatura}\n```{r echo=FALSE, message=FALSE, warning=FALSE}\n#                                   Temperatura\nsimulaciones_6meses_convolucional_7dias <- read_excel(\"simulaciones_6meses_convolucional_7dias_Temperatura.xlsx\")\nsimulaciones_6meses_convolucional_7dias <- subset(simulaciones_6meses_convolucional_7dias, select = -c(Simulacion_7 ))\nmediana_6meses_convolucional_Tem <- apply(simulaciones_6meses_convolucional_7dias, 1, median)\nsimulaciones_6meses_LSTM_7dias <- read_excel(\"10simulaciones_6meses_lstm_Temperatura_7dias.xlsx\")\nmediana_6meses_LSTM_Tem <- apply(simulaciones_6meses_LSTM_7dias, 1, median)\nTemp <- datos_clima$`T (degC)`[(7*144):(194*144)]\nTemp <-Temp +273.15\nDatos_historicos6 <- Temp \n\n\n\n\nsimulaciones_3meses_Conv_Tem <- read_excel(\"simulaciones_3mes_convolucional_Temp_4dias.xlsx\")\nsimulaciones_3meses_Conv_Tem <- subset(simulaciones_3meses_Conv_Tem, select = -c(Simulacion_7,Simulacion_10,Simulacion_13,Simulacion_24,Simulacion_25,Simulacion_29,Simulacion_30,Simulacion_35,Simulacion_36,Simulacion_44,Simulacion_49 ))\nmediana_3meses_Conv_Tem <- apply(simulaciones_3meses_Conv_Tem, 1, median)\nsimulaciones_3meses_lstm_4dias <- read_excel(\"simulaciones_3meses_lstm_4dias_Temp.xlsx\")\nmediana_3meses_LSTM_Tem <- apply(simulaciones_3meses_lstm_4dias, 1, median)\n\n\n\nsimulaciones_1mes_convolucional_Tem_4dias <- read_excel(\"simulaciones_1mes_convolucional_Tem_4dias.xlsx\")\nsimulaciones_1mes_convolucional_Tem_4dias <- subset(simulaciones_1mes_convolucional_Tem_4dias, select = -c(Simulacion_5,Simulacion_9,Simulacion_12,Simulacion_17,Simulacion_23,Simulacion_28,Simulacion_32,Simulacion_35,Simulacion_43,Simulacion_44,Simulacion_55,Simulacion_59,Simulacion_62,Simulacion_67,Simulacion_73,Simulacion_78,Simulacion_82,Simulacion_85,Simulacion_93,Simulacion_94))\nmediana_Tem_1mes_CNN <- apply(simulaciones_1mes_convolucional_Tem_4dias, 1, median)\nsimulaciones_1mes_lstm_Tem <- read_excel(\"simulaciones_1mes_lstm_Tem.xlsx\")\nmediana_Tem_1mes_LSTM <- apply(simulaciones_1mes_lstm_Tem, 1, median)\n\n\n\nsimulaciones_15dias_lstm <- read_excel(\"simulaciones_15dias_lstm_Temp.xlsx\")\nmediana_15dias_lstm_Tem <- apply(simulaciones_15dias_lstm, 1, median)\nsimulaciones_15dias_conv <- read_excel(\"simulaciones_15dias_convolucional_2dias_Tem.xlsx\")\nsimulaciones_15dias_conv <- subset(simulaciones_15dias_conv, select = -c(Simulacion_88,Simulacion_88))\nmediana_15dias_conv <- apply(simulaciones_15dias_conv, 1, median)\n\n#View(simulaciones_1mes_convolucional_Tem_4dias)\n\n\nDate <- datos_clima$`Date Time`[(7*144):(194*144)]\ndate1 <- datos_clima$`Date Time`[(187*144):(194*144-1)]\ndate2 <- datos_clima$`Date Time`[(97*144):(101*144-1)]\ndate3 <- datos_clima$`Date Time`[(37*144):(41*144-1)]\ndate4 <- datos_clima$`Date Time`[(22*144):(24*144-1)]\n\n\nfig1<- grafico(Datos_historicos6,Date,date1,simulaciones_6meses_convolucional_7dias,mediana_6meses_convolucional_Tem,simulaciones_6meses_LSTM_7dias,mediana_6meses_LSTM_Tem  )\n\nfig2 <-grafico(Datos_historicos6,Date,date2,simulaciones_3meses_Conv_Tem,mediana_3meses_Conv_Tem,simulaciones_3meses_lstm_4dias,mediana_3meses_LSTM_Tem)\n\n\nfig3 <-grafico(Datos_historicos6,Date,date3,simulaciones_1mes_convolucional_Tem_4dias,mediana_Tem_1mes_CNN,simulaciones_1mes_lstm_Tem,mediana_Tem_1mes_LSTM)\n\nfig4 <-grafico2(Datos_historicos6,Date,date4,simulaciones_15dias_conv,mediana_15dias_conv,simulaciones_15dias_lstm,mediana_15dias_lstm_Tem)\n\n\n# \n# \nfig <- subplot(fig1, fig2,fig3,fig4 ,nrows = 2, margin = 0.04) %>%\n  layout(showlegend = TRUE,annotations = annotations)\nfig\n\n\n```\n\nPredicción de 7 días, 4 días y 2 días de la Temperatura (° F) utilizando la red neuronal convolucional y la red neuronal LSTM\n:::\n::::\n\n::: {.content-visible when-format=\"html\" style=\"text-align: justify\"}\nLos resultados en la Figura @fig-Temperatura de Temperatura (° F) indican que la mediana de los pronósticos a 7 días, 4 días y 2 días utilizando la red neuronal LSTM presenta una aproximación más precisa a los datos históricos que la pronosticada por la red neuronal convolucional.\n\n<!-- Y también para los 4 días correspondientes a 08 de Abril del 2009 al 12 de Abril al 2009. -->\n\n<!-- 08 de febrero del 2009 al 11 de Febrero del 2009. -->\n\n<!-- 23 de Enero de 2009 al 25 de Junio de 2009. -->\n:::\n\n:::: {.content-visible when-format=\"html\"}\n::: {#fig-pmbar}\n```{r echo=FALSE, message=FALSE, warning=FALSE}\nlibrary(readxl)\n#                                (pmbar)\np_aire6       <-df_clima$p..mbar.[(7*144):(194*144)]\nsimulaciones_6meses_convolucional_pmbar <- read_excel(\"simulaciones_6mes_convolucional_pmbar_7dias.xlsx\")\nmediana_6meses_convolucional_pmbar <- apply(simulaciones_6meses_convolucional_pmbar, 1, median)\nsimulaciones_6meses_LSTM_pmbar <- read_excel(\"10simulaciones_6meses_lstm_pmbar_7dias.xlsx\")\nmediana_6meses_LSTM_pmbar <- apply(simulaciones_6meses_LSTM_pmbar, 1, median)\n\nsimulaciones_3meses_convolucional_pmbar_4dias <- read_excel(\"simulaciones_3meses_convolucional_pmbar_4dias.xlsx\")\nsimulaciones_3meses_convolucional_pmbar_4dias <- subset(simulaciones_3meses_convolucional_pmbar_4dias, select = -c(Simulacion_21,Simulacion_39))\nmediana_3meses_convolucional_pmbar <- apply(simulaciones_3meses_convolucional_pmbar_4dias, 1, median)\nsimulaciones_3meses_LSTM_pmbar <- read_excel(\"50simulaciones_3meses_lstm_pmbar_4dias.xlsx\")\nmediana_3meses_LSTM_pmbar <- apply(simulaciones_3meses_LSTM_pmbar, 1, median)\n\nsimulaciones_1mes_lstm_mbar <- read_excel(\"simulaciones_1mes_lstm_mbar.xlsx\")\nmediana_1mes_mbar_LSTM <- apply(simulaciones_1mes_lstm_mbar, 1, median)\nsimulaciones_1mes_conv_mbar <- read_excel(\"simulaciones_1mes_convolucional_mbar_4dias.xlsx\")\nmediana_1mes_mbar_conv <- apply(simulaciones_1mes_conv_mbar, 1, median)\n\nsimulaciones_15dias_lstm_pmbar_2dias<- read_excel(\"simulaciones_15dias_lstm_pmbar_2dias.xlsx\")\nmediana_15dias_pmbar_LSTM <- apply(simulaciones_15dias_lstm_pmbar_2dias, 1, median)\nsimulaciones_15dias_convolucional_2dias_pmbar <- read_excel(\"simulaciones_15dias_convolucional_2dias_pmbar.xlsx\")\nmediana_15dias_mbar_conv <- apply(simulaciones_15dias_convolucional_2dias_pmbar, 1, median)\n\n\n\nfig1<- grafico(p_aire6 ,Date,date1,simulaciones_6meses_convolucional_pmbar,mediana_6meses_convolucional_pmbar,simulaciones_6meses_LSTM_pmbar,mediana_6meses_LSTM_pmbar )\n\nfig2 <-grafico(p_aire6,Date,date2,simulaciones_3meses_convolucional_pmbar_4dias,mediana_3meses_convolucional_pmbar,simulaciones_3meses_LSTM_pmbar,mediana_3meses_LSTM_pmbar )\n\nfig3 <-grafico(p_aire6,Date,date3,simulaciones_1mes_conv_mbar,mediana_1mes_mbar_conv,simulaciones_1mes_lstm_mbar,mediana_1mes_mbar_LSTM )\n\nfig4 <-grafico2(p_aire6,Date,date4,simulaciones_15dias_convolucional_2dias_pmbar,mediana_15dias_mbar_conv,simulaciones_15dias_lstm_pmbar_2dias,mediana_15dias_pmbar_LSTM )\n\n\n# fig <- subplot(fig1, fig2,fig3,fig4 ,nrows = 2, margin = 0.05) %>%\n#   layout(showlegend = TRUE, margin = list(b = 20),annotations = annotations)\n# fig\n\nfig <- subplot(fig1, fig2,fig3,fig4 ,nrows = 2, margin = 0.04) %>%\n  layout(showlegend = TRUE,annotations = annotations)\nfig\n\n\n```\n\nPredicción de 7 días, 4 días y 2 días de la presión del aire p(mbar) utilizando la red neuronal convolucional y la red neuronal LSTM.\n:::\n::::\n\n:::: {.content-visible when-format=\"html\"}\n::: {#fig-rho}\n```{r echo=FALSE, message=FALSE, warning=FALSE}\n#                        (  rho  )\nd_aire6         <-df_clima$rho..g.m..3.[(7*144):(194*144)]\nsimulaciones_6meses_convolucional_7dias <- read_excel(\"simulaciones_6meses_convolucional_7dias_rho.xlsx\")\nmediana_6meses_convolucional_rho <- apply(simulaciones_6meses_convolucional_7dias, 1, median)\nsimulaciones_6meses_LSTM <- read_excel(\"10simulaciones_6meses_lstm_rho_7dias.xlsx\")\nmediana_6meses_LSTM_rho <- apply(simulaciones_6meses_LSTM, 1, median)\n\n\n\n\nsimulaciones_3meses_convolucional_rho_4dias <- read_excel(\"simulaciones_3meses_convolucional_rho_4dias.xlsx\")\nsimulaciones_3meses_convolucional_rho_4dias <- subset(simulaciones_3meses_convolucional_rho_4dias, select = -c(Simulacion_9,Simulacion_14,Simulacion_15,Simulacion_16,Simulacion_18,Simulacion_19,Simulacion_21,Simulacion_27,Simulacion_28,Simulacion_29,Simulacion_30,Simulacion_32,Simulacion_35,Simulacion_38,Simulacion_39,Simulacion_43,Simulacion_46,Simulacion_47,Simulacion_48,Simulacion_49 ))\nmediana_3meses_convolucional_rho <- apply(simulaciones_3meses_convolucional_rho_4dias, 1, median)\nsimulaciones_3meses_lstm_rho_4dias <- read_excel(\"50simulaciones_3meses_lstm_rho_4dias.xlsx\")\nmediana_3meses_LSTM_rho <- apply(simulaciones_3meses_lstm_rho_4dias, 1, median)\n\n\n\n\n\nsimulaciones_1mes_lstm_rho <- read_excel(\"simulaciones_1mes_lstm_rho.xlsx\")\nmediana_1mes_rho_LSTM <- apply(simulaciones_1mes_lstm_rho, 1, median)\nsimulaciones_1mes_convolucional_rho <- read_excel(\"simulaciones_1mes_convolucional_rho_4dias .xlsx\")\nsimulaciones_1mes_convolucional_rho <- subset(simulaciones_1mes_convolucional_rho, select = -c(Simulacion_2,Simulacion_3,Simulacion_4,Simulacion_10,Simulacion_14,Simulacion_15,Simulacion_18,Simulacion_22,Simulacion_24,Simulacion_26,Simulacion_27,Simulacion_28,Simulacion_30,Simulacion_31,Simulacion_32,Simulacion_34,Simulacion_35,Simulacion_36,Simulacion_37,Simulacion_40,Simulacion_44,Simulacion_46,Simulacion_47,Simulacion_50,Simulacion_66))\nmediana_1mes_rho_conv <- apply(simulaciones_1mes_convolucional_rho, 1, median)\n\n\nsimulaciones_15dias_lstm_rho_2dias   <- read_excel(\"simulaciones_15dias_lstm_rho_2dias.xlsx\")\nmediana_15dias_rho_LSTM <- apply(simulaciones_15dias_lstm_rho_2dias, 1, median)\nsimulaciones_15dias_convolucional_rho_2dias <- read_excel(\"simulaciones_15dias_convolucional_rho_2dias.xlsx\")\nsimulaciones_15dias_convolucional_rho_2dias <- subset(simulaciones_15dias_convolucional_rho_2dias, select = -c(Simulacion_6,Simulacion_7,Simulacion_9,Simulacion_10,Simulacion_12,Simulacion_16,Simulacion_23,Simulacion_25,Simulacion_28,Simulacion_32,Simulacion_33,Simulacion_34,Simulacion_38,Simulacion_41,Simulacion_43,Simulacion_47,Simulacion_48,Simulacion_49,Simulacion_50,Simulacion_62,Simulacion_63,Simulacion_65,Simulacion_66,Simulacion_69,Simulacion_74,Simulacion_80,Simulacion_81,Simulacion_83,Simulacion_85,Simulacion_86,Simulacion_92,Simulacion_93,Simulacion_95,Simulacion_96,Simulacion_98))\nmediana_15dias_rho_conv <- apply(simulaciones_15dias_convolucional_rho_2dias, 1, median)\n\n\n\nfig1<- grafico(d_aire6,Date,date1,simulaciones_6meses_convolucional_7dias,mediana_6meses_convolucional_rho,simulaciones_6meses_LSTM,mediana_6meses_LSTM_rho )\nfig2 <-grafico(d_aire6,Date,date2,simulaciones_3meses_convolucional_rho_4dias,mediana_3meses_convolucional_rho,simulaciones_3meses_lstm_rho_4dias ,mediana_3meses_LSTM_rho )\n\nfig3 <-grafico(d_aire6,Date,date3,simulaciones_1mes_convolucional_rho,mediana_1mes_rho_conv,simulaciones_1mes_lstm_rho,mediana_1mes_rho_LSTM )\n\nfig4 <-grafico2(d_aire6,Date,date4,simulaciones_15dias_convolucional_rho_2dias ,mediana_15dias_rho_conv,simulaciones_15dias_lstm_rho_2dias,mediana_15dias_rho_LSTM )\n\n\n\n# \n# fig <- subplot(fig1, fig2,fig3,fig4 ,nrows = 4, margin = 0.05) %>%\n#   layout(showlegend = TRUE, margin = list(b = 20),annotations = annotations)\n# fig\n\nfig <- subplot(fig1, fig2,fig3,fig4 ,nrows = 2, margin = 0.04) %>%\n  layout(showlegend = TRUE,annotations = annotations)\nfig\n\n```\n\nPredicción de 7 días, 4 días y 2 días de la densidad del aire utilizando la red neuronal convolucional y la red neuronal LSTM.\n:::\n::::\n\n:::: {.content-visible when-format=\"html\"}\n::: {#fig-rh}\n```{r echo=FALSE, message=FALSE, warning=FALSE}\n#                        (  rh )\nh_relativa6   <-df_clima$rh....[(7*144):(194*144)] #humedad relativa\nsimulaciones_6meses_convolucional_7dias <- read_excel(\"simulaciones_6mes_convolucional_rh_7dias.xlsx\")\nmediana_6meses_convolucional_rh <- apply(simulaciones_6meses_convolucional_7dias, 1, median)\nsimulaciones_6meses_LSTM_rh <- read_excel(\"10simulaciones_6meses_lstm_rh_7dias.xlsx\")\nmediana_6meses_LSTM_rh <- apply(simulaciones_6meses_LSTM_rh, 1, median)\n\nsimulaciones_3meses_convolucional_rh_4dias <- read_excel(\"simulaciones_3meses_convolucional_rh_4dias.xlsx\")\nsimulaciones_3meses_convolucional_rh_4dias <- subset(simulaciones_3meses_convolucional_rh_4dias, select = -c(Simulacion_13))\nmediana_3meses_convolucional_rh <- apply(simulaciones_3meses_convolucional_rh_4dias, 1, median)\nsimulaciones_3meses_lstm_rh_4dias <- read_excel(\"50simulaciones_3meses_lstm_rh_4dias.xlsx\")\nmediana_3meses_LSTM_rh <- apply(simulaciones_3meses_lstm_rh_4dias, 1, median)\n\nsimulaciones_1mes_lstm_rh <- read_excel(\"simulaciones_1mes_lstm_rh.xlsx\")\nmediana_1mes_rh_LSTM <- apply(simulaciones_1mes_lstm_rh, 1, median)\nsimulaciones_1mes_conv_rh <- read_excel(\"simulaciones_1mes_convolucional_rh_4dias.xlsx\")\nmediana_1mes_rh_conv <- apply(simulaciones_1mes_conv_rh, 1, median)\n\n\n\nsimulaciones_15dias_lstm_rh_2dias <- read_excel(\"simulaciones_15dias_lstm_rh_2dias.xlsx\")\nmediana_15dias_rh_LSTM <- apply(simulaciones_15dias_lstm_rh_2dias, 1, median)\nsimulaciones_15dias_convolucional_rh_2dias <- read_excel(\"simulaciones_15dias_convolucional_rh_2dias.xlsx\")\nmediana_15dias_rh_conv <- apply(simulaciones_15dias_convolucional_rh_2dias, 1, median)\n\nfig1<- grafico(h_relativa6 ,Date,date1, simulaciones_6meses_convolucional_7dias ,mediana_6meses_convolucional_rh ,simulaciones_6meses_LSTM_rh,mediana_6meses_LSTM_rh  )\n\nfig2<- grafico(h_relativa6 ,Date,date2, simulaciones_3meses_convolucional_rh_4dias ,mediana_3meses_convolucional_rh ,simulaciones_3meses_lstm_rh_4dias,mediana_3meses_LSTM_rh  )\n\nfig3 <- grafico(h_relativa6,Date,date3,simulaciones_1mes_conv_rh,mediana_1mes_rh_conv ,simulaciones_1mes_lstm_rh,mediana_1mes_rh_LSTM )\n\nfig4 <- grafico2(h_relativa6,Date,date4,simulaciones_15dias_convolucional_rh_2dias,mediana_15dias_rh_conv,simulaciones_15dias_lstm_rh_2dias,mediana_15dias_rh_LSTM)\n\n# fig <- subplot(fig1, fig2,fig3,fig4 ,nrows = 4, margin = 0.05) %>%\n#   layout(showlegend = TRUE, margin = list(b = 20),annotations = annotations)\n# fig\n\nfig <- subplot(fig1, fig2,fig3,fig4 ,nrows = 2, margin = 0.04) %>%\n  layout(showlegend = TRUE,annotations = annotations)\nfig\n\n\n```\n\nPredicción de 7 días, 4 días y 2 días de la humedad relativa utilizando la red neuronal convolucional y la red neuronal LSTM\n:::\n::::\n\n:::: {.content-visible when-format=\"html\"}\n::: {#fig-wv}\n```{r echo=FALSE, message=FALSE, warning=FALSE}\n#               (wv)\nv_viento6      <-df_clima$wv..m.s.[(7*144):(194*144)]\nsimulaciones_6meses_convolucional_7dias <- read_excel(\"simulaciones_6meses_convolucional_7dias_wv.xlsx\")\nmediana_6meses_convolucional_wv <- apply(simulaciones_6meses_convolucional_7dias, 1, median)\n\nsimulaciones_6meses_LSTM_wv <- read_excel(\"10simulaciones_6meses_lstm_wv_7dias.xlsx\")\nmediana_6meses_LSTM_wv <- apply(simulaciones_6meses_LSTM_wv, 1, median)\n\nsimulaciones_3mes_Conv_wv <- read_excel(\"simulaciones_3mes_convolucional_wv_4dias.xlsx\")\nsimulaciones_3mes_Conv_wv <- subset(simulaciones_3mes_Conv_wv, select = -c(Simulacion_2,Simulacion_34,Simulacion_10 ))\nmediana_3meses_Conv_wv <- apply(simulaciones_3mes_Conv_wv, 1, median)\nsimulaciones_3mes_LSTM_wv <- read_excel(\"50simulaciones_3meses_lstm_wv_4dias.xlsx\")\nmediana_3meses_LSTM_wv <- apply(simulaciones_3mes_LSTM_wv, 1, median)\n\nsimulaciones_1mes_conv_wv <- read_excel(\"simulaciones_1mes_convolucional_wv_4dias.xlsx\")\nsimulaciones_1mes_conv_wv <- subset(simulaciones_1mes_conv_wv, select = -c(Simulacion_25 ))\nmediana_1mes_wv_conv <- apply(simulaciones_1mes_conv_wv, 1, median)\nsimulaciones_1mes_lstm_wv <- read_excel(\"simulaciones_1mes_lstm_wv.xlsx\")\nmediana_1mes_wv_LSTM <- apply(simulaciones_1mes_lstm_wv, 1, median)\n\nsimulaciones_15dias_convolucional_wv_2dias <- read_excel(\"simulaciones_15dias_convolucional_wv_2dias.xlsx\")\nmediana_15dias_wv_conv <- apply(simulaciones_15dias_convolucional_wv_2dias, 1, median)\nsimulaciones_15dias_lstm_wv_2dias <- read_excel(\"simulaciones_15dias_lstm_wv_2dias.xlsx\")\nmediana_15dias_wv_LSTM <- apply(simulaciones_15dias_lstm_wv_2dias, 1, median)\n\nfig1 <- grafico(v_viento6,Date,date1,simulaciones_6meses_convolucional_7dias,mediana_6meses_convolucional_wv,simulaciones_6meses_LSTM_wv,mediana_6meses_LSTM_wv)\n\nfig2 <- grafico(v_viento6,Date,date2,simulaciones_3mes_Conv_wv,mediana_3meses_Conv_wv,simulaciones_3mes_LSTM_wv,mediana_3meses_LSTM_wv )\n\n\nfig3 <- grafico(v_viento6,Date,date3, simulaciones_1mes_conv_wv, mediana_1mes_wv_conv, simulaciones_1mes_lstm_wv,mediana_1mes_wv_LSTM )\n\nfig4 <- grafico2(v_viento6,Date,date4,simulaciones_15dias_convolucional_wv_2dias,mediana_15dias_wv_conv,simulaciones_15dias_lstm_wv_2dias,mediana_15dias_wv_LSTM)\n\n\n# \n# fig <- subplot(fig1, fig2,fig3,fig4 ,nrows = 4, margin = 0.05) %>%\n#   layout(showlegend = TRUE, margin = list(b = 20),annotations = annotations)\n# fig\nfig <- subplot(fig1, fig2,fig3,fig4 ,nrows = 2, margin = 0.04) %>%\n  layout(showlegend = TRUE,annotations = annotations)\nfig\n\n```\n\nPredicción de 7 días, 4 días y 2 días de la velocidad del viento utilizando la red neuronal convolucional y la red neuronal LSTM\n:::\n::::\n\n::: {.content-visible when-format=\"pdf\"}\n![Predicción de 7 días, 4 días y 2 días de la Temperatura (° F) utilizando la red neuronal convolucional y la red neuronal LSTM](Temperatura2.png){#fig-Temperaturapdf width=\"515\"}\n:::\n\n::: {.content-visible when-format=\"pdf\" style=\"text-align: justify\"}\nLos resultados en la Figura de Temperatura (@fig-Temperaturapdf) indican que la [mediana](Estadistica.qmd#sec-Mediana) de los pronósticos a 7 días, 4 días y 2 días utilizando la red neuronal LSTM presenta una aproximación más precisa a los datos históricos que la pronosticada por la red neuronal convolucional.\n:::\n\n::: {.content-visible when-format=\"pdf\"}\n![Predicción de 7 días, 4 días y 2 días de la presión del aire utilizando la red neuronal convolucional y la red neuronal LSTM.](PMBAR.png){#fig-pmbarpdf}\n:::\n\n::: {.content-visible when-format=\"pdf\"}\n![Predicción de 7 días, 4 días y 2 días de la densidad del aire utilizando la red neuronal convolucional y la red neuronal LSTM.](RHO.png){#fig-rhopdf}\n:::\n\n::: {.content-visible when-format=\"pdf\"}\n![Predicción de 7 días, 4 días y 2 días de la humedad relativa utilizando la red neuronal convolucional y la red neuronal LSTM](RH.png){#fig-rhpdf}\n:::\n\n::: {.content-visible when-format=\"pdf\"}\n![Predicción de 7 días, 4 días y 2 días de la velocidad del viento utilizando la red neuronal convolucional y la red neuronal LSTM](WV.png){#fig-wvpdf}\n:::\n\n::: {.content-visible when-format=\"pdf\" style=\"text-align: justify\"}\n\\newpage\n:::\n\n#### RMSE\n\n::: {style=\"text-align: justify\"}\nLuego de obtener los valores pronosticados por las redes propuestas, se tomó la [mediana](Estadistica.qmd#sec-Mediana) de los pronósticos y se procedió a contrastarlos con el error cuadrático medio ([RMSE](series.qmd#sec-RMSE)). Esto permitió determinar el menor valor del error y así identificar diferencias de usa los modelos de redes. Los resultados obtenidos se muestran en @tbl-RMSE.\n:::\n\n|  |  |  |  |  |\n|:-------------:|:-------------:|:-------------:|:-------------:|:-------------:|\n|  |  | **RMSE** |  |  |\n| **Datos históricos** | **180 días** | **90 días** | **30 días** | **15 días** |\n| **Numero de días pronosticados** | 7 días | 4 días | 4 días | 2 días |\n| **Temperatura (CNN)** | 7.748363 | 12.544 | 4.729259 | 5.89646 |\n| **Temperatura (LSTM)** | 3.035672 | 7.350131 | 3.267742 | 4.281648 |\n| **Velocidad del viento (CNN)** | 1.805565 | 1.525929 | 2.68279 | 3.638407 |\n| **Velocidad del viento (LSTM)** | 1.415952 | 1.366431 | 2.711044 | 2.846553 |\n| **Densidad del aire (CNN)** | 43.71869 | 24.26363 | 26.00116 | 69.96927 |\n| **Densidad del aire (LSTM)** | 14.33086 | 43.15156 | 22.59924 | 38.28266 |\n| **Humedad relativa (CNN)** | 23.77749 | 34.24427 | 21.69839 | 10.64634 |\n| **Humedad relativa (LSTM)** | 10.83128 | 12.39585 | 13.42141 | 14.1402 |\n| **Presión del aire (CNN)** | 9.351951 | 19.09469 | 17.30254 | 17.22759 |\n| **Presión del aire (LSTM)** | 3.638899 | 3.289955 | 9.254557 | 22.74026 |\n\n: RMSE de la mediana de los pronósticos para 5 variables. {#tbl-RMSE}\n\n::: {style=\"text-align: justify\"}\nA través de la @tbl-RMSE, se observa inicialmente de que para estos datos meteorológicos, la red neuronal LSTM exhibe un error considerablemente menor en comparación con la red neuronal convolucional. Esto resulta en un pronóstico mas cercano a los valores reales, por lo tanto, se recomienda utilizar la red neuronal LSTM para llevar a cabo futuras predicciones.\n\nEn la @tbl-RMSE se observa que la red neuronal LSTM proporciona una mejor aproximación para la variable velocidad del viento, ya que el error cuadrático medio ([RMSE](series.qmd#sec-RMSE)) es significativamente menor en todos los pronóstico realizados en comparación con la red neuronal convolucional. Además, el mismo análisis en la @tbl-RMSE revela que, a medida que aumentan los datos históricos de la velocidad del viento, el RMSE tiende a disminuir.\n\nPor otro lado, se observa en @tbl-RMSE que el pronóstico para la densidad del aire no es tan preciso, ya que presenta el ([RMSE](series.qmd#sec-RMSE)) más alto en comparación con las demás variables. En ambos modelos, tanto la red neuronal LSTM como la red neuronal convolucional, no logran una buena predicción en los días pronosticados, comparado con la gráfica del valor real. Esta diferencia en la precisión del pronóstico podría deberse a varios factores. Uno de los factores potenciales es una posible falla en los sensores de densidad del aire. Los sensores podrían estar proporcionando datos inconsistentes, lo que afectaría la capacidad de los modelos para aprender patrones precisos y hacer predicciones confiables. Además, es posible que haya fluctuaciones no detectadas en las condiciones ambientales o interferencias externas que impacten la precisión de los sensores.\n:::\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":true,"code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","highlight-style":"a11y","html-math-method":"mathjax","output-file":"estudio.html"},"language":{"toc-title-document":"Tabla de contenidos","toc-title-website":"En esta página","related-formats-title":"Otros formatos","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Fuente","other-links-title":"Otros Enlaces","code-links-title":"Enlaces de código","launch-dev-container-title":"Iniciar Dev Container","launch-binder-title":"Iniciar Binder","article-notebook-label":"Cuaderno de Artículo","notebook-preview-download":"Descargar Cuaderno","notebook-preview-download-src":"Descargar código fuente","notebook-preview-back":"Volver al Artículo","manuscript-meca-bundle":"Archivo MECA","section-title-abstract":"Resumen","section-title-appendices":"Apéndices","section-title-footnotes":"Notas","section-title-references":"Referencias","section-title-reuse":"Reutilización","section-title-copyright":"Derechos de autor","section-title-citation":"Cómo citar","appendix-attribution-cite-as":"Por favor, cita este trabajo como:","appendix-attribution-bibtex":"BibTeX","appendix-view-license":"Ver Licencia","title-block-author-single":"Autor/a","title-block-author-plural":"Autores/as","title-block-affiliation-single":"Afiliación","title-block-affiliation-plural":"Afiliaciones","title-block-published":"Fecha de publicación","title-block-modified":"Fecha de modificación","title-block-keywords":"Palabras clave","callout-tip-title":"Tip","callout-note-title":"Nota","callout-warning-title":"Advertencia","callout-important-title":"Importante","callout-caution-title":"Precaución","code-summary":"Código","code-tools-menu-caption":"Código","code-tools-show-all-code":"Mostrar todo el código","code-tools-hide-all-code":"Ocultar todo el código","code-tools-view-source":"Ver el código fuente","code-tools-source-code":"Ejecutar el código","tools-share":"Compartir","tools-download":"Descargar","code-line":"Línea","code-lines":"Líneas","copy-button-tooltip":"Copiar al portapapeles","copy-button-tooltip-success":"Copiado","repo-action-links-edit":"Editar esta página","repo-action-links-source":"Ver el código","repo-action-links-issue":"Informar de un problema","back-to-top":"Volver arriba","search-no-results-text":"Sin resultados","search-matching-documents-text":"documentos encontrados","search-copy-link-title":"Copiar el enlace en la búsqueda","search-hide-matches-text":"Ocultar resultados adicionales","search-more-match-text":"resultado adicional en este documento","search-more-matches-text":"resultados adicionales en este documento","search-clear-button-title":"Borrar","search-text-placeholder":"","search-detached-cancel-button-title":"Cancelar","search-submit-button-title":"Enviar","search-label":"Buscar","toggle-section":"Alternar sección","toggle-sidebar":"Alternar barra lateral","toggle-dark-mode":"Alternar modo oscuro","toggle-reader-mode":"Alternar modo lector","toggle-navigation":"Navegación de palanca","crossref-fig-title":"Figura","crossref-tbl-title":"Tabla","crossref-lst-title":"Listado","crossref-thm-title":"Teorema","crossref-lem-title":"Lema","crossref-cor-title":"Corolario","crossref-prp-title":"Proposición","crossref-cnj-title":"Conjetura","crossref-def-title":"Definición","crossref-exm-title":"Ejemplo","crossref-exr-title":"Ejercicio","crossref-ch-prefix":"Capítulo","crossref-apx-prefix":"Apéndice","crossref-sec-prefix":"Sección","crossref-eq-prefix":"Ecuación","crossref-lof-title":"Listado de Figuras","crossref-lot-title":"Listado de Tablas","crossref-lol-title":"Listado de Listados","environment-proof-title":"Prueba","environment-remark-title":"Observación","environment-solution-title":"Solución","listing-page-order-by":"Ordenar por","listing-page-order-by-default":"Por defecto","listing-page-order-by-date-asc":"Menos reciente","listing-page-order-by-date-desc":"Más reciente","listing-page-order-by-number-desc":"De mayor a menor","listing-page-order-by-number-asc":"De menor a mayor","listing-page-field-date":"Fecha","listing-page-field-title":"Título","listing-page-field-description":"Descripción","listing-page-field-author":"Autor/a","listing-page-field-filename":"Nombre de archivo","listing-page-field-filemodified":"Fecha de modificación","listing-page-field-subtitle":"Subtítulo","listing-page-field-readingtime":"Tiempo de lectura","listing-page-field-wordcount":"Conteo de Palabras","listing-page-field-categories":"Categorías","listing-page-minutes-compact":"{0} minutos","listing-page-category-all":"Todas","listing-page-no-matches":"No hay resultados","listing-page-words":"{0} palabras","listing-page-filter":"Filtro","draft":"Borrador"},"metadata":{"lang":"es","fig-responsive":true,"quarto-version":"1.6.37","bibliography":["references.bib"],"editor":"visual","theme":{"dark":"darkly"},"grid":{"sidebar-width":"300px","body-width":"900px","margin-width":"300px","gutter-width":"1.5rem"},"code-copy":true},"extensions":{"book":{"multiFile":true}}},"pdf":{"identifier":{"display-name":"PDF","target-format":"pdf","base-format":"pdf"},"execute":{"fig-width":5.5,"fig-height":3.5,"fig-format":"pdf","fig-dpi":300,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"knitr"},"render":{"keep-tex":true,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"pdf","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":true,"merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"pdf-engine":"xelatex","standalone":true,"variables":{"graphics":true,"tables":true},"default-image-extension":"pdf","to":"pdf","cite-method":"biblatex","include-in-header":["packa.tex"],"output-file":"estudio.pdf"},"language":{"toc-title-document":"Tabla de contenidos","toc-title-website":"En esta página","related-formats-title":"Otros formatos","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Fuente","other-links-title":"Otros Enlaces","code-links-title":"Enlaces de código","launch-dev-container-title":"Iniciar Dev Container","launch-binder-title":"Iniciar Binder","article-notebook-label":"Cuaderno de Artículo","notebook-preview-download":"Descargar Cuaderno","notebook-preview-download-src":"Descargar código fuente","notebook-preview-back":"Volver al Artículo","manuscript-meca-bundle":"Archivo MECA","section-title-abstract":"Resumen","section-title-appendices":"Apéndices","section-title-footnotes":"Notas","section-title-references":"Referencias","section-title-reuse":"Reutilización","section-title-copyright":"Derechos de autor","section-title-citation":"Cómo citar","appendix-attribution-cite-as":"Por favor, cita este trabajo como:","appendix-attribution-bibtex":"BibTeX","appendix-view-license":"Ver Licencia","title-block-author-single":"Autor/a","title-block-author-plural":"Autores/as","title-block-affiliation-single":"Afiliación","title-block-affiliation-plural":"Afiliaciones","title-block-published":"Fecha de publicación","title-block-modified":"Fecha de modificación","title-block-keywords":"Palabras clave","callout-tip-title":"Tip","callout-note-title":"Nota","callout-warning-title":"Advertencia","callout-important-title":"Importante","callout-caution-title":"Precaución","code-summary":"Código","code-tools-menu-caption":"Código","code-tools-show-all-code":"Mostrar todo el código","code-tools-hide-all-code":"Ocultar todo el código","code-tools-view-source":"Ver el código fuente","code-tools-source-code":"Ejecutar el código","tools-share":"Compartir","tools-download":"Descargar","code-line":"Línea","code-lines":"Líneas","copy-button-tooltip":"Copiar al portapapeles","copy-button-tooltip-success":"Copiado","repo-action-links-edit":"Editar esta página","repo-action-links-source":"Ver el código","repo-action-links-issue":"Informar de un problema","back-to-top":"Volver arriba","search-no-results-text":"Sin resultados","search-matching-documents-text":"documentos encontrados","search-copy-link-title":"Copiar el enlace en la búsqueda","search-hide-matches-text":"Ocultar resultados adicionales","search-more-match-text":"resultado adicional en este documento","search-more-matches-text":"resultados adicionales en este documento","search-clear-button-title":"Borrar","search-text-placeholder":"","search-detached-cancel-button-title":"Cancelar","search-submit-button-title":"Enviar","search-label":"Buscar","toggle-section":"Alternar sección","toggle-sidebar":"Alternar barra lateral","toggle-dark-mode":"Alternar modo oscuro","toggle-reader-mode":"Alternar modo lector","toggle-navigation":"Navegación de palanca","crossref-fig-title":"Figura","crossref-tbl-title":"Tabla","crossref-lst-title":"Listado","crossref-thm-title":"Teorema","crossref-lem-title":"Lema","crossref-cor-title":"Corolario","crossref-prp-title":"Proposición","crossref-cnj-title":"Conjetura","crossref-def-title":"Definición","crossref-exm-title":"Ejemplo","crossref-exr-title":"Ejercicio","crossref-ch-prefix":"Capítulo","crossref-apx-prefix":"Apéndice","crossref-sec-prefix":"Sección","crossref-eq-prefix":"Ecuación","crossref-lof-title":"Listado de Figuras","crossref-lot-title":"Listado de Tablas","crossref-lol-title":"Listado de Listados","environment-proof-title":"Prueba","environment-remark-title":"Observación","environment-solution-title":"Solución","listing-page-order-by":"Ordenar por","listing-page-order-by-default":"Por defecto","listing-page-order-by-date-asc":"Menos reciente","listing-page-order-by-date-desc":"Más reciente","listing-page-order-by-number-desc":"De mayor a menor","listing-page-order-by-number-asc":"De menor a mayor","listing-page-field-date":"Fecha","listing-page-field-title":"Título","listing-page-field-description":"Descripción","listing-page-field-author":"Autor/a","listing-page-field-filename":"Nombre de archivo","listing-page-field-filemodified":"Fecha de modificación","listing-page-field-subtitle":"Subtítulo","listing-page-field-readingtime":"Tiempo de lectura","listing-page-field-wordcount":"Conteo de Palabras","listing-page-field-categories":"Categorías","listing-page-minutes-compact":"{0} minutos","listing-page-category-all":"Todas","listing-page-no-matches":"No hay resultados","listing-page-words":"{0} palabras","listing-page-filter":"Filtro","draft":"Borrador"},"metadata":{"block-headings":true,"bibliography":["references.bib"],"editor":"visual","lang":"es","template-partials":["before-body.tex"],"documentclass":"scrreprt","papersize":"us-letter"},"extensions":{"book":{"selfContainedOutput":true}}}},"projectFormats":["html","pdf"]}